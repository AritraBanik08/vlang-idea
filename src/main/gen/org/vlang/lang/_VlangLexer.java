/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.vlang.lang.VlangParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>v.flex</tt>
 */
public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int C_STRING_LITERAL = 4;
  public static final int C_FLAG_VALUE_EXPECTED = 6;
  /* The ZZ_CMAP_A table has 3136 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
    "\11\0\1\2\1\1\1\105\1\2\1\4\22\0\1\2\1\54\1\25\1\62\1\73\1\61\1\57\1\26\1"+
    "\46\1\47\1\5\1\56\1\52\1\20\1\21\1\3\1\14\7\13\1\33\1\12\1\50\1\51\1\36\1"+
    "\53\1\37\1\55\1\0\2\11\1\24\1\11\1\17\1\11\3\6\1\22\10\6\1\23\1\6\1\32\2\6"+
    "\1\16\2\6\1\44\1\31\1\45\1\60\1\7\1\40\1\71\1\34\1\30\1\67\1\35\1\70\1\72"+
    "\1\77\1\63\1\6\1\76\1\65\1\101\1\64\1\100\1\102\1\6\1\27\1\74\1\75\1\66\1"+
    "\32\1\103\1\15\1\104\1\6\1\42\1\41\1\43\7\0\1\105\24\0\1\6\12\0\1\6\4\0\1"+
    "\6\5\0\27\6\1\0\12\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\23\6\1\0\13\6\10\0\6\6\1"+
    "\0\26\6\2\0\1\6\6\0\10\6\10\0\13\6\5\0\3\6\15\0\12\10\4\0\6\6\1\0\1\6\17\0"+
    "\2\6\7\0\2\6\12\10\3\6\2\0\2\6\1\0\16\6\15\0\11\6\13\0\1\6\16\0\12\10\6\6"+
    "\4\0\2\6\4\0\1\6\5\0\6\6\4\0\1\6\11\0\1\6\3\0\1\6\7\0\11\6\7\0\5\6\1\0\10"+
    "\6\6\0\26\6\3\0\1\6\2\0\1\6\7\0\12\6\4\0\12\10\1\6\4\0\10\6\2\0\2\6\2\0\26"+
    "\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0\2\6\1\0\1\6\5\0\6\6\4\0\2"+
    "\6\1\0\2\6\1\0\2\6\1\0\2\6\17\0\4\6\1\0\1\6\7\0\12\10\2\0\3\6\20\0\11\6\1"+
    "\0\2\6\1\0\2\6\1\0\5\6\3\0\1\6\2\0\1\6\30\0\1\6\13\0\10\6\2\0\1\6\3\0\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\13\0\10\6\1\0\2\6\10\0\3\6\5\0\1\6\4\0\10\6\1\0\6\6\1\0\5\6\3\0\1\6\3\0\2"+
    "\6\15\0\13\6\2\0\1\6\6\0\3\6\10\0\1\6\12\0\6\6\5\0\22\6\3\0\10\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\11\0\1\6\1\0\2\6\14\0\12\10\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1"+
    "\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\0\2\6"+
    "\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\10\2\0\14\6\1\0\24\6\13\0\5\6\22\0\7\6\4"+
    "\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1\6\1\0\6\6\1\0\1\6\5\0\1\6\2"+
    "\0\13\6\1\0\15\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\1\6\1\0\4\6\2\0\7\6\1"+
    "\0\1\6\1\0\4\6\2\0\16\6\2\0\6\6\2\0\15\6\2\0\1\6\1\0\10\6\7\0\15\6\1\0\6\6"+
    "\23\0\1\6\4\0\1\6\3\0\5\6\2\0\22\6\1\0\1\6\5\0\17\6\1\0\16\6\2\0\5\6\13\0"+
    "\14\6\13\0\1\6\15\0\7\6\7\0\16\6\15\0\2\6\12\10\3\0\3\6\11\0\4\6\1\0\4\6\3"+
    "\0\2\6\11\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\6\6\1\0\7\6\1\0\1\6\3\0\3\6\1"+
    "\0\7\6\3\0\4\6\2\0\6\6\14\0\2\105\7\0\1\6\15\0\1\6\2\0\1\6\4\0\1\6\2\0\12"+
    "\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5"+
    "\6\4\0\1\6\4\0\2\6\13\0\5\6\6\0\4\6\3\0\2\6\14\0\10\6\7\0\10\6\1\0\7\6\6\0"+
    "\2\6\12\0\5\6\5\0\2\6\3\0\7\6\6\0\3\6\12\10\2\6\13\0\11\6\2\0\27\6\2\0\7\6"+
    "\1\0\3\6\1\0\4\6\1\0\4\6\2\0\6\6\3\0\1\6\1\0\1\6\2\0\5\6\1\0\12\6\12\10\5"+
    "\6\1\0\3\6\1\0\10\6\4\0\7\6\3\0\1\6\3\0\2\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1"+
    "\6\1\0\1\6\30\0\3\6\3\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\4\0\5\6\3\0\5\6\5\0\1"+
    "\6\1\0\10\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\12\6\6\0\12\6\2\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2\6\1\0\2\6\1\0\10\6\6\0\4\6\4"+
    "\0\16\6\2\0\1\6\1\0\14\6\1\0\2\6\3\0\1\6\2\0\4\6\1\0\2\6\12\0\10\6\6\0\6\6"+
    "\1\0\3\6\1\0\12\6\3\0\1\6\12\0\4\6\13\0\12\10\1\6\1\0\1\6\3\0\7\6\1\0\1\6"+
    "\1\0\4\6\1\0\17\6\1\0\2\6\14\0\3\6\7\0\4\6\11\0\2\6\1\0\1\6\20\0\4\6\10\0"+
    "\1\6\13\0\10\6\5\0\3\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1"+
    "\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\14\6"+
    "\2\0\13\6\1\0\10\6\2\0\22\10\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0"+
    "\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1"+
    "\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6"+
    "\1\0\4\6\1\0\1\6\1\0\12\6\1\0\5\6\1\0\3\6\1\0\5\6\1\0\5\6");
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");
  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\2\7\1\10\1\11\2\6\2\1\4\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\1\6\6\1\1\4\6\1\36\1\37"+
    "\1\36\1\40\1\3\2\36\1\41\1\3\1\42\1\43"+
    "\1\44\1\45\1\6\2\0\1\46\1\47\1\50\1\0"+
    "\1\51\1\52\1\53\2\0\1\54\3\0\6\6\1\55"+
    "\1\56\1\57\1\60\1\61\1\14\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\2\0\1\76\1\77\3\6\1\100\2\6\1\101"+
    "\1\102\2\0\10\6\1\103\1\0\1\43\1\6\1\46"+
    "\1\0\1\104\1\105\1\106\7\6\1\107\1\110\1\111"+
    "\2\0\5\6\1\112\2\6\1\0\1\113\4\6\1\114"+
    "\2\6\1\115\1\43\1\0\2\6\1\116\3\6\1\117"+
    "\1\120\2\0\7\6\1\121\1\0\3\6\1\122\4\6"+
    "\1\123\1\6\1\124\1\0\1\125\3\6\1\126\3\6"+
    "\1\127\3\6\1\130\2\6\1\131\1\6\1\0\1\6"+
    "\1\132\1\133\2\6\1\134\1\135\1\136\1\137\1\140"+
    "\2\6\1\0\1\6\1\141\1\6\1\142\1\143\1\144"+
    "\2\6\1\145\2\6\1\146";
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u0118\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0762\0\u0118\0\u0118\0\u07a8\0\u07ee\0\u0118"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0118\0\u0118\0\u0c94\0\u0cda\0\u0d20\0\u04a6\0\u0d66\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0118\0\u0118\0\u0ec4\0\u02bc\0\u0f0a"+
    "\0\u0f50\0\u0118\0\u0f96\0\u0fdc\0\u0118\0\u0118\0\u1022\0\u1068"+
    "\0\u04a6\0\u0118\0\u10ae\0\u04ec\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u0118\0\u12de\0\u0118\0\u1324\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u136a\0\u0118\0\u0118\0\u13b0\0\u13f6\0\u143c"+
    "\0\u0230\0\u1482\0\u14c8\0\u150e\0\u0230\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u0118\0\u0d66\0\u1928\0\u196e\0\u19b4"+
    "\0\u19fa\0\u0118\0\u0fdc\0\u0118\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u0118\0\u0118\0\u0118\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u0230\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u0118\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u0230\0\u1ffe"+
    "\0\u2044\0\u0230\0\u0118\0\u1928\0\u208a\0\u20d0\0\u0230\0\u2116"+
    "\0\u215c\0\u21a2\0\u0230\0\u0230\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u0230\0\u245e\0\u24a4"+
    "\0\u24ea\0\u2530\0\u0230\0\u2576\0\u25bc\0\u2602\0\u2648\0\u0230"+
    "\0\u268e\0\u0230\0\u26d4\0\u0118\0\u271a\0\u2760\0\u27a6\0\u0230"+
    "\0\u27ec\0\u2832\0\u2878\0\u0118\0\u28be\0\u2904\0\u294a\0\u0230"+
    "\0\u2990\0\u29d6\0\u0230\0\u2a1c\0\u2a62\0\u2aa8\0\u0230\0\u0230"+
    "\0\u2aee\0\u2b34\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u0230\0\u2c92\0\u0230\0\u0230\0\u0118"+
    "\0\u2cd8\0\u2d1e\0\u0230\0\u2d64\0\u2daa\0\u0230";
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\12\2\15\1\16\3\12\1\17\1\20\1\21"+
    "\1\12\1\22\1\23\1\24\1\25\1\26\1\5\1\12"+
    "\1\15\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\12\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\3\12\1\67\1\70\2\12\1\0\1\71"+
    "\1\72\1\7\1\73\1\0\100\71\1\0\1\71\1\74"+
    "\1\75\1\71\1\0\20\71\1\76\10\71\1\77\46\71"+
    "\1\0\1\100\1\74\1\101\1\100\1\0\101\100\107\0"+
    "\1\6\107\0\1\102\1\0\1\103\45\0\1\104\105\0"+
    "\1\105\40\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\10\12\1\0\11\12\7\0\1\12\1\106"+
    "\10\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\10\12\1\0\11\12\11\0\1\107\1\0\3\107\2\0"+
    "\1\110\1\0\1\111\11\0\1\107\1\0\1\110\25\0"+
    "\1\112\32\0\1\107\1\0\3\15\2\0\1\110\1\0"+
    "\1\111\11\0\1\15\1\0\1\110\25\0\1\112\32\0"+
    "\1\107\1\0\1\107\2\113\2\114\1\110\1\0\1\111"+
    "\11\0\1\107\1\0\1\110\25\0\1\112\42\0\1\115"+
    "\32\0\1\116\42\0\1\111\1\0\3\111\4\0\1\117"+
    "\11\0\1\111\60\0\12\12\2\0\1\12\1\22\1\12"+
    "\2\0\2\12\1\0\4\12\25\0\10\12\1\0\11\12"+
    "\7\0\12\12\1\0\1\120\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\10\12\1\0\11\12\1\0\1\121\1\0"+
    "\2\121\1\0\20\121\1\122\3\121\1\123\54\121\1\124"+
    "\1\0\2\124\1\0\21\124\1\122\2\124\1\125\54\124"+
    "\6\0\12\12\2\0\3\12\1\121\1\124\2\12\1\0"+
    "\3\12\1\126\25\0\10\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\1\121\1\124\2\12\1\0\4\12\25\0"+
    "\6\12\1\127\1\12\1\0\4\12\1\130\4\12\7\0"+
    "\12\12\2\0\3\12\2\0\1\131\1\12\1\0\4\12"+
    "\25\0\10\12\1\0\11\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\1\12\1\132\1\133"+
    "\5\12\1\0\11\12\21\0\1\134\15\0\1\135\14\0"+
    "\1\136\71\0\1\137\13\0\1\140\32\0\40\33\1\141"+
    "\45\33\41\0\1\142\11\0\1\143\105\0\1\144\105\0"+
    "\1\145\105\0\1\146\105\0\1\147\2\0\1\150\102\0"+
    "\1\151\3\0\1\152\1\153\100\0\1\154\105\0\1\155"+
    "\115\0\1\156\4\0\1\157\23\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\1\12\1\160\3\12"+
    "\1\161\2\12\1\0\5\12\1\162\3\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\1\12"+
    "\1\163\6\12\1\0\11\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\3\12\1\164\25\0\10\12\1\0"+
    "\11\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\1\12\1\165\4\12\1\166\1\12\1\0"+
    "\4\12\1\167\4\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\10\12\1\0\1\170\10\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\10\12\1\0\4\12\1\171\4\12\36\0\1\172"+
    "\25\0\1\173\30\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\174\25\0\10\12\1\0\1\12\1\175"+
    "\5\12\1\176\1\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\10\12\1\0\10\12\1\177"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\3\12\1\200\2\12\1\201\1\12\1\0\4\12"+
    "\1\202\4\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\3\12\1\203\4\12\1\0\11\12"+
    "\4\0\1\102\1\0\1\103\101\0\1\74\105\0\1\204"+
    "\104\0\1\205\1\0\2\205\1\0\24\205\1\0\4\205"+
    "\1\0\1\122\46\205\1\100\1\0\2\100\1\0\102\100"+
    "\1\204\2\100\1\0\101\100\1\102\1\0\2\102\1\0"+
    "\101\102\5\103\1\206\100\103\6\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\7\12\1\207\1\0"+
    "\11\12\11\0\1\210\1\0\3\210\3\0\1\211\12\0"+
    "\1\210\22\0\1\211\37\0\1\111\1\0\3\111\2\0"+
    "\1\110\13\0\1\111\1\0\1\110\25\0\1\212\32\0"+
    "\1\107\1\0\1\107\2\113\2\0\1\110\1\0\1\111"+
    "\11\0\1\107\1\0\1\110\25\0\1\112\33\0\4\213"+
    "\2\0\1\213\4\0\1\213\3\0\1\213\2\0\3\213"+
    "\31\0\3\213\35\0\1\214\72\0\2\215\1\0\1\215"+
    "\3\0\3\215\2\0\3\215\2\0\2\215\1\0\1\215"+
    "\1\0\2\215\25\0\10\215\1\0\11\215\14\0\3\121"+
    "\7\0\1\121\1\0\1\121\1\0\5\121\26\0\1\121"+
    "\1\0\1\121\1\0\2\121\3\0\1\121\23\0\3\124"+
    "\10\0\2\124\1\0\5\124\26\0\1\124\1\0\1\124"+
    "\1\0\2\124\3\0\1\124\16\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\10\12\1\0\1\12"+
    "\1\216\7\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\10\12\1\0\1\217\10\12\7\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\1\12\1\220\6\12\1\0\11\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\3\12\1\221\25\0\10\12"+
    "\1\0\11\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\3\12\1\222\4\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\10\12\1\0\1\223\10\12\54\0\1\224\105\0"+
    "\1\225\105\0\1\226\116\0\1\227\106\0\1\230\26\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\10\12\1\0\1\12\1\231\7\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\10\12\1\0"+
    "\6\12\1\232\2\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\10\12\1\0\1\233\10\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\5\12\1\234\2\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\2\12"+
    "\1\235\5\12\1\0\11\12\7\0\12\12\2\0\3\12"+
    "\2\0\1\236\1\12\1\0\4\12\25\0\10\12\1\0"+
    "\11\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\10\12\1\0\1\237\10\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\10\12"+
    "\1\0\1\12\1\240\7\12\66\0\1\241\110\0\1\242"+
    "\23\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\2\12\1\243\5\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\1\244\1\12\1\0\4\12\25\0"+
    "\10\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\1\245\7\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\10\12\1\0\6\12\1\246\2\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\10\12"+
    "\1\0\1\12\1\247\7\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\10\12\1\0\1\12"+
    "\1\250\7\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\4\12\1\251\3\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\2\12"+
    "\1\252\1\12\25\0\10\12\1\0\11\12\1\0\3\103"+
    "\1\253\1\103\1\254\100\103\6\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\2\12\1\255\5\12"+
    "\1\0\11\12\11\0\1\210\1\0\3\210\16\0\1\210"+
    "\27\0\1\212\32\0\1\210\1\0\3\210\16\0\1\210"+
    "\60\0\12\215\1\0\4\215\2\0\2\215\1\0\4\215"+
    "\25\0\10\215\1\0\11\215\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\3\12\1\256\4\12"+
    "\1\0\11\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\257\25\0\10\12\1\0\11\12\7\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\10\12\1\0\1\260\1\261\7\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\6\12\1\262"+
    "\1\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\10\12\1\0\5\12\1\263"+
    "\3\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\3\12\1\264\25\0\10\12\1\0\11\12\31\0\1\265"+
    "\146\0\1\266\22\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\267\25\0\10\12\1\0\11\12\7\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\10\12\1\0\4\12\1\270\4\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\6\12\1\271"+
    "\1\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\3\12\1\272\25\0\6\12\1\273\1\12"+
    "\1\0\11\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\2\12\1\274\5\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\3\12"+
    "\1\275\25\0\10\12\1\0\11\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\10\12\1\0"+
    "\4\12\1\276\4\12\75\0\1\277\17\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\3\12\1\300\25\0\10\12"+
    "\1\0\11\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\3\12\1\301\4\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\10\12\1\0\1\12\1\302\7\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\3\12\1\303\25\0"+
    "\10\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\1\12\1\304\1\0\4\12\25\0\10\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\3\12\1\305\4\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\10\12"+
    "\1\0\4\12\1\306\4\12\7\0\12\12\2\0\3\12"+
    "\2\0\1\307\1\12\1\0\4\12\25\0\10\12\1\0"+
    "\11\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\10\12\1\0\1\12\1\310\7\12\7\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\1\311\7\12\1\0\11\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\10\12\1\0\2\12"+
    "\1\312\6\12\66\0\1\313\112\0\1\314\21\0\12\12"+
    "\2\0\3\12\2\0\1\315\1\12\1\0\4\12\25\0"+
    "\10\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\1\316\1\12\1\0\4\12\25\0\10\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\5\12\1\317\2\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\1\320\1\12\1\0\4\12\25\0"+
    "\10\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\3\12\1\321\4\12\1\0"+
    "\11\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\10\12\1\0\1\12\1\322\7\12\7\0"+
    "\12\12\2\0\3\12\2\0\1\323\1\12\1\0\4\12"+
    "\25\0\10\12\1\0\11\12\36\0\1\324\56\0\12\12"+
    "\2\0\3\12\2\0\1\12\1\325\1\0\4\12\25\0"+
    "\10\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\1\12\1\326\1\0\4\12\25\0\10\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\1\12\1\327\1\0"+
    "\4\12\25\0\10\12\1\0\11\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\10\12\1\0"+
    "\3\12\1\330\5\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\2\12\1\331\5\12\1\0"+
    "\11\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\2\12\1\332\1\12\25\0\10\12\1\0\11\12\7\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\1\12\1\333\6\12\1\0\11\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\1\12\1\334"+
    "\6\12\1\0\11\12\67\0\1\335\25\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\5\12\1\336"+
    "\2\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\10\12\1\0\1\12\1\337"+
    "\7\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\3\12\1\340\25\0\10\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\2\12"+
    "\1\341\5\12\1\0\11\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\10\12\1\0\3\12"+
    "\1\342\5\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\4\12\25\0\10\12\1\0\1\12\1\343\7\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\10\12\1\0\1\12\1\344\7\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\10\12"+
    "\1\0\1\12\1\345\7\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\4\12\25\0\10\12\1\0\3\12"+
    "\1\346\5\12\7\0\12\12\2\0\3\12\2\0\2\12"+
    "\1\0\3\12\1\347\25\0\10\12\1\0\11\12\7\0"+
    "\12\12\2\0\3\12\2\0\2\12\1\0\4\12\25\0"+
    "\6\12\1\350\1\12\1\0\11\12\7\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\3\12\1\351"+
    "\4\12\1\0\11\12\70\0\1\352\24\0\12\12\2\0"+
    "\3\12\2\0\2\12\1\0\4\12\25\0\6\12\1\353"+
    "\1\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\10\12\1\0\1\12\1\354"+
    "\7\12\7\0\12\12\2\0\3\12\2\0\1\355\1\12"+
    "\1\0\4\12\25\0\10\12\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\2\12"+
    "\1\356\5\12\1\0\11\12\7\0\12\12\2\0\3\12"+
    "\2\0\2\12\1\0\3\12\1\357\25\0\10\12\1\0"+
    "\11\12\36\0\1\360\56\0\12\12\2\0\3\12\2\0"+
    "\1\12\1\361\1\0\4\12\25\0\10\12\1\0\11\12"+
    "\7\0\12\12\2\0\3\12\2\0\2\12\1\0\4\12"+
    "\25\0\10\12\1\0\4\12\1\362\4\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\3\12\1\363\25\0"+
    "\10\12\1\0\11\12\7\0\12\12\2\0\3\12\2\0"+
    "\2\12\1\0\4\12\25\0\3\12\1\364\4\12\1\0"+
    "\11\12\7\0\12\12\2\0\3\12\2\0\2\12\1\0"+
    "\4\12\25\0\7\12\1\365\1\0\11\12\7\0\12\12"+
    "\2\0\3\12\2\0\2\12\1\0\4\12\25\0\10\12"+
    "\1\0\3\12\1\366\5\12\1\0";
  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\25\1\6\11\1\1\2\11"+
    "\2\1\1\11\20\1\2\11\11\1\2\11\1\1\2\0"+
    "\1\1\1\11\1\1\1\0\2\11\1\1\2\0\1\11"+
    "\3\0\6\1\1\11\1\1\1\11\1\1\13\11\1\1"+
    "\2\11\2\0\12\1\2\0\10\1\1\11\1\0\3\1"+
    "\1\0\1\11\1\1\1\11\7\1\3\11\2\0\10\1"+
    "\1\0\1\11\10\1\1\11\1\0\10\1\2\0\10\1"+
    "\1\0\13\1\1\0\1\11\7\1\1\11\10\1\1\0"+
    "\14\1\1\0\5\1\1\11\6\1";

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static int [] zzUnpackTrans() {
    int [] result = new int[11760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private final java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VlangLexer() {
    this(null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 103: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 104: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 105: break;
          case 4: 
            { return QUOTIENT;
            } 
            // fall through
          case 106: break;
          case 5: 
            { return MUL;
            } 
            // fall through
          case 107: break;
          case 6: 
            { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;
            } 
            // fall through
          case 108: break;
          case 7: 
            { yybegin(MAYBE_SEMICOLON); return INT;
            } 
            // fall through
          case 109: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 110: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 111: break;
          case 10: 
            { return LESS;
            } 
            // fall through
          case 112: break;
          case 11: 
            { return GREATER;
            } 
            // fall through
          case 113: break;
          case 12: 
            { yybegin(MAYBE_SEMICOLON); return RAW_STRING;
            } 
            // fall through
          case 114: break;
          case 13: 
            { return BIT_OR;
            } 
            // fall through
          case 115: break;
          case 14: 
            { return LBRACE;
            } 
            // fall through
          case 116: break;
          case 15: 
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            } 
            // fall through
          case 117: break;
          case 16: 
            { return LBRACK;
            } 
            // fall through
          case 118: break;
          case 17: 
            { yybegin(MAYBE_SEMICOLON); return RBRACK;
            } 
            // fall through
          case 119: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 120: break;
          case 19: 
            { yybegin(MAYBE_SEMICOLON); return RPAREN;
            } 
            // fall through
          case 121: break;
          case 20: 
            { return COLON;
            } 
            // fall through
          case 122: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 123: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 124: break;
          case 23: 
            { return ASSIGN;
            } 
            // fall through
          case 125: break;
          case 24: 
            { return NOT;
            } 
            // fall through
          case 126: break;
          case 25: 
            { return QUESTION;
            } 
            // fall through
          case 127: break;
          case 26: 
            { return PLUS;
            } 
            // fall through
          case 128: break;
          case 27: 
            { return BIT_AND;
            } 
            // fall through
          case 129: break;
          case 28: 
            { return BIT_XOR;
            } 
            // fall through
          case 130: break;
          case 29: 
            { return REMAINDER;
            } 
            // fall through
          case 131: break;
          case 30: 
            { yybegin(YYINITIAL); yypushback(yytext().length());
            } 
            // fall through
          case 132: break;
          case 31: 
            { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 133: break;
          case 32: 
            { yybegin(YYINITIAL); return NLS;
            } 
            // fall through
          case 134: break;
          case 33: 
            { yybegin(MAYBE_SEMICOLON); return C_FLAG_VALUE;
            } 
            // fall through
          case 135: break;
          case 34: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 136: break;
          case 35: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 137: break;
          case 36: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 37: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 139: break;
          case 38: 
            { yybegin(MAYBE_SEMICOLON); return FLOAT;
            } 
            // fall through
          case 140: break;
          case 39: 
            { yybegin(MAYBE_SEMICOLON); return DECIMALI;
            } 
            // fall through
          case 141: break;
          case 40: 
            { yybegin(MAYBE_SEMICOLON); return OCT;
            } 
            // fall through
          case 142: break;
          case 41: 
            { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;
            } 
            // fall through
          case 143: break;
          case 42: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 43: 
            { return RANGE;
            } 
            // fall through
          case 145: break;
          case 44: 
            { yybegin(MAYBE_SEMICOLON); return STRING;
            } 
            // fall through
          case 146: break;
          case 45: 
            { return SEND_CHANNEL;
            } 
            // fall through
          case 147: break;
          case 46: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 148: break;
          case 47: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 149: break;
          case 48: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 150: break;
          case 49: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 151: break;
          case 50: 
            { return COND_OR;
            } 
            // fall through
          case 152: break;
          case 51: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 153: break;
          case 52: 
            { return VAR_ASSIGN;
            } 
            // fall through
          case 154: break;
          case 53: 
            { return EQ;
            } 
            // fall through
          case 155: break;
          case 54: 
            { return NOT_EQ;
            } 
            // fall through
          case 156: break;
          case 55: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 157: break;
          case 56: 
            { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;
            } 
            // fall through
          case 158: break;
          case 57: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 159: break;
          case 58: 
            { return COND_AND;
            } 
            // fall through
          case 160: break;
          case 59: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 161: break;
          case 60: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 162: break;
          case 61: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 163: break;
          case 62: 
            { return IN;
            } 
            // fall through
          case 164: break;
          case 63: 
            { return IF ;
            } 
            // fall through
          case 165: break;
          case 64: 
            { return FN;
            } 
            // fall through
          case 166: break;
          case 65: 
            { return AS ;
            } 
            // fall through
          case 167: break;
          case 66: 
            { return GO;
            } 
            // fall through
          case 168: break;
          case 67: 
            { yybegin(YYINITIAL); return WS;
            } 
            // fall through
          case 169: break;
          case 68: 
            { yybegin(MAYBE_SEMICOLON); return FLOATI;
            } 
            // fall through
          case 170: break;
          case 69: 
            { yybegin(MAYBE_SEMICOLON); return HEX;
            } 
            // fall through
          case 171: break;
          case 70: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 172: break;
          case 71: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 173: break;
          case 72: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 174: break;
          case 73: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 175: break;
          case 74: 
            { return FOR ;
            } 
            // fall through
          case 176: break;
          case 75: 
            { return IF_COMPILE_TIME ;
            } 
            // fall through
          case 177: break;
          case 76: 
            { return MUT;
            } 
            // fall through
          case 178: break;
          case 77: 
            { return PUB;
            } 
            // fall through
          case 179: break;
          case 78: 
            { return CASE;
            } 
            // fall through
          case 180: break;
          case 79: 
            { return ENUM;
            } 
            // fall through
          case 181: break;
          case 80: 
            { return ELSE;
            } 
            // fall through
          case 182: break;
          case 81: 
            { return GOTO;
            } 
            // fall through
          case 183: break;
          case 82: 
            { return TYPE_;
            } 
            // fall through
          case 184: break;
          case 83: 
            { return CONST;
            } 
            // fall through
          case 185: break;
          case 84: 
            { yybegin(MAYBE_SEMICOLON); return BREAK;
            } 
            // fall through
          case 186: break;
          case 85: 
            { yybegin(C_FLAG_VALUE_EXPECTED); return C_FLAG;
            } 
            // fall through
          case 187: break;
          case 86: 
            { return DEFER;
            } 
            // fall through
          case 188: break;
          case 87: 
            { return ELSE_COMPILE_TIME ;
            } 
            // fall through
          case 189: break;
          case 88: 
            { return MATCH ;
            } 
            // fall through
          case 190: break;
          case 89: 
            { yybegin(MAYBE_SEMICOLON); return RETURN ;
            } 
            // fall through
          case 191: break;
          case 90: 
            { return IMPORT ;
            } 
            // fall through
          case 192: break;
          case 91: 
            { return UNSAFE;
            } 
            // fall through
          case 193: break;
          case 92: 
            { return ASSERT;
            } 
            // fall through
          case 194: break;
          case 93: 
            { return SELECT;
            } 
            // fall through
          case 195: break;
          case 94: 
            { return STRUCT;
            } 
            // fall through
          case 196: break;
          case 95: 
            { return SWITCH;
            } 
            // fall through
          case 197: break;
          case 96: 
            { return MODULE;
            } 
            // fall through
          case 198: break;
          case 97: 
            { return DEFAULT;
            } 
            // fall through
          case 199: break;
          case 98: 
            { return BUILTIN_GLOBAL;
            } 
            // fall through
          case 200: break;
          case 99: 
            { yybegin(MAYBE_SEMICOLON); return CONTINUE ;
            } 
            // fall through
          case 201: break;
          case 100: 
            { yybegin(C_STRING_LITERAL); return C_INCLUDE;
            } 
            // fall through
          case 202: break;
          case 101: 
            { return INTERFACE;
            } 
            // fall through
          case 203: break;
          case 102: 
            { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;
            } 
            // fall through
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
