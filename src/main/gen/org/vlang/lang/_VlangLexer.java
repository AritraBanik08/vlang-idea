/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.vlang.lang.VlangTypes;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.vlang.lang.VlangParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>v.flex</tt>
 */
public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int C_STRING_LITERAL = 4;
  public static final int C_FLAG_VALUE_EXPECTED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\107\1\2\1\4\22\0\1\2\1\60\1\30\1\47\1\76\1\65\1\63\1\43\1"+
    "\52\1\53\1\5\1\62\1\56\1\23\1\24\1\3\1\15\1\14\6\13\1\42\1\12\1\54\1\55\1"+
    "\37\1\57\1\40\1\61\1\66\2\11\1\27\1\11\1\22\1\11\3\6\1\25\10\6\1\26\1\6\1"+
    "\34\2\6\1\17\2\6\1\50\1\41\1\51\1\64\1\7\1\31\1\35\1\21\1\33\1\73\1\36\1\74"+
    "\1\75\1\102\1\67\1\6\1\101\1\71\1\103\1\70\1\20\1\104\1\6\1\32\1\77\1\100"+
    "\1\72\1\34\1\105\1\16\1\106\1\6\1\45\1\44\1\46\7\0\1\107\24\0\1\6\12\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\12\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2"+
    "\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\23\6\1\0\13\6\10\0"+
    "\6\6\1\0\26\6\2\0\1\6\6\0\10\6\10\0\13\6\5\0\3\6\15\0\12\10\4\0\6\6\1\0\1"+
    "\6\17\0\2\6\7\0\2\6\12\10\3\6\2\0\2\6\1\0\16\6\15\0\11\6\13\0\1\6\16\0\12"+
    "\10\6\6\4\0\2\6\4\0\1\6\5\0\6\6\4\0\1\6\11\0\1\6\3\0\1\6\7\0\11\6\7\0\5\6"+
    "\1\0\10\6\6\0\26\6\3\0\1\6\2\0\1\6\7\0\12\6\4\0\12\10\1\6\4\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0\2\6\1\0\1\6\5\0\6"+
    "\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\17\0\4\6\1\0\1\6\7\0\12\10\2\0\3\6\20\0"+
    "\11\6\1\0\2\6\1\0\2\6\1\0\5\6\3\0\1\6\2\0\1\6\30\0\1\6\13\0\10\6\2\0\1\6\3"+
    "\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\13\0\10\6\1\0\2\6\10\0\3\6\5\0\1\6\4\0\10\6\1\0\6\6\1\0\5\6\3\0\1\6"+
    "\3\0\2\6\15\0\13\6\2\0\1\6\6\0\3\6\10\0\1\6\12\0\6\6\5\0\22\6\3\0\10\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\11\0\1\6\1\0\2\6\14\0\12\10\7\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1"+
    "\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\10\2\0\14\6\1\0\24\6\13\0\5\6\22\0"+
    "\7\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1\6\1\0\6\6\1\0\1\6\5\0"+
    "\1\6\2\0\13\6\1\0\15\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\16\6\2\0\6\6\2\0\15\6\2\0\1\6\1\0\10\6\7\0\15\6\1"+
    "\0\6\6\23\0\1\6\4\0\1\6\3\0\5\6\2\0\22\6\1\0\1\6\5\0\17\6\1\0\16\6\2\0\5\6"+
    "\13\0\14\6\13\0\1\6\15\0\7\6\7\0\16\6\15\0\2\6\12\10\3\0\3\6\11\0\4\6\1\0"+
    "\4\6\3\0\2\6\11\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\6\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\14\0\2\107\7\0\1\6\15\0\1\6\2\0\1\6\4\0\1\6\2"+
    "\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5"+
    "\0\5\6\4\0\1\6\4\0\2\6\13\0\5\6\6\0\4\6\3\0\2\6\14\0\10\6\7\0\10\6\1\0\7\6"+
    "\6\0\2\6\12\0\5\6\5\0\2\6\3\0\7\6\6\0\3\6\12\10\2\6\13\0\11\6\2\0\27\6\2\0"+
    "\7\6\1\0\3\6\1\0\4\6\1\0\4\6\2\0\6\6\3\0\1\6\1\0\1\6\2\0\5\6\1\0\12\6\12\10"+
    "\5\6\1\0\3\6\1\0\10\6\4\0\7\6\3\0\1\6\3\0\2\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\0\1\6\30\0\3\6\3\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\4\0\5\6\3\0\5\6\5\0"+
    "\1\6\1\0\10\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\12\6\6\0\12\6\2\0\6\6\2"+
    "\0\6\6\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2\6\1\0\2\6\1\0\10\6\6\0\4\6"+
    "\4\0\16\6\2\0\1\6\1\0\14\6\1\0\2\6\3\0\1\6\2\0\4\6\1\0\2\6\12\0\10\6\6\0\6"+
    "\6\1\0\3\6\1\0\12\6\3\0\1\6\12\0\4\6\13\0\12\10\1\6\1\0\1\6\3\0\7\6\1\0\1"+
    "\6\1\0\4\6\1\0\17\6\1\0\2\6\14\0\3\6\7\0\4\6\11\0\2\6\1\0\1\6\20\0\4\6\10"+
    "\0\1\6\13\0\10\6\5\0\3\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6"+
    "\1\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\14"+
    "\6\2\0\13\6\1\0\10\6\2\0\22\10\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1"+
    "\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4"+
    "\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\5\6\1\0\3\6\1\0\5\6\1\0\5\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\2\7\2\6\1\10\1\11\2\6\1\12\1\1\4\6"+
    "\1\13\1\14\1\12\1\15\1\16\1\17\1\1\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\6\6\1\1"+
    "\4\6\1\37\1\40\1\41\1\3\1\40\1\42\1\3"+
    "\2\40\1\43\1\3\1\0\1\37\1\44\1\45\1\46"+
    "\1\47\3\6\2\0\1\50\1\7\6\0\1\51\1\6"+
    "\1\52\1\53\1\54\1\55\1\0\1\12\1\0\4\6"+
    "\1\56\2\6\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\2\0\1\67\1\70\1\71\1\0\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\6\6\1\104\1\105\3\0\11\6\1\66\2\37"+
    "\1\106\1\0\1\107\2\0\1\45\1\6\1\0\1\54"+
    "\1\110\1\111\1\112\1\6\1\113\1\114\1\6\1\115"+
    "\7\6\1\116\1\117\4\0\1\120\6\6\1\121\2\6"+
    "\1\0\1\122\1\0\7\6\1\123\1\124\2\37\1\45"+
    "\1\0\6\6\1\125\1\6\1\126\1\127\2\0\1\130"+
    "\1\131\2\6\1\132\5\6\1\133\1\0\1\134\4\6"+
    "\1\135\2\6\2\37\1\6\1\136\1\6\1\137\1\140"+
    "\2\6\1\0\1\141\2\6\1\142\2\6\1\143\1\6"+
    "\1\144\5\6\1\145\1\37\1\141\1\6\1\146\1\6"+
    "\1\147\1\0\1\6\1\150\1\151\2\6\1\152\1\153"+
    "\1\154\1\155\1\156\1\37\2\6\1\0\1\6\1\157"+
    "\1\6\1\37\1\160\1\161\1\162\2\6\1\162\1\163"+
    "\2\6\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u0168"+
    "\0\u0168\0\u08b8\0\u0168\0\u0168\0\u0168\0\u0168\0\u0900\0\u0168"+
    "\0\u0168\0\u0948\0\u0990\0\u0168\0\u09d8\0\u0a20\0\u0a68\0\u0ab0"+
    "\0\u0168\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8"+
    "\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0168\0\u0168\0\u0168"+
    "\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u01f8"+
    "\0\u1050\0\u1098\0\u10e0\0\u0168\0\u0168\0\u1128\0\u1170\0\u11b8"+
    "\0\u1200\0\u0360\0\u0168\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368"+
    "\0\u13b0\0\u13f8\0\u02d0\0\u1440\0\u0168\0\u0168\0\u1488\0\u14d0"+
    "\0\u1518\0\u0168\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8"+
    "\0\u1710\0\u1758\0\u0168\0\u17a0\0\u0168\0\u17e8\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u1830\0\u1878\0\u0168\0\u0168\0\u0168\0\u18c0"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u1908\0\u0168\0\u0168\0\u1950"+
    "\0\u02d0\0\u02d0\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00"+
    "\0\u02d0\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8"+
    "\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1050\0\u1ef0"+
    "\0\u1f38\0\u0168\0\u0f30\0\u0168\0\u1f80\0\u0f78\0\u1fc8\0\u2010"+
    "\0\u2058\0\u20a0\0\u1368\0\u13b0\0\u13f8\0\u20e8\0\u0168\0\u0168"+
    "\0\u2130\0\u0168\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0"+
    "\0\u2328\0\u0168\0\u0168\0\u2370\0\u23b8\0\u2400\0\u2448\0\u0168"+
    "\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u02d0\0\u2640"+
    "\0\u2688\0\u26d0\0\u0168\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838"+
    "\0\u2880\0\u28c8\0\u2910\0\u02d0\0\u02d0\0\u2958\0\u29a0\0\u0168"+
    "\0\u1fc8\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u02d0"+
    "\0\u2b98\0\u02d0\0\u02d0\0\u2be0\0\u2c28\0\u2400\0\u2448\0\u2c70"+
    "\0\u2cb8\0\u02d0\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u02d0"+
    "\0\u2e68\0\u0168\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u02d0\0\u2fd0"+
    "\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u02d0\0\u3138\0\u02d0\0\u02d0"+
    "\0\u3180\0\u31c8\0\u3210\0\u0168\0\u3258\0\u32a0\0\u02d0\0\u32e8"+
    "\0\u3330\0\u02d0\0\u3378\0\u0168\0\u33c0\0\u3408\0\u3450\0\u3498"+
    "\0\u34e0\0\u02d0\0\u3528\0\u1050\0\u3570\0\u02d0\0\u35b8\0\u02d0"+
    "\0\u3600\0\u3648\0\u02d0\0\u02d0\0\u3690\0\u36d8\0\u02d0\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840"+
    "\0\u02d0\0\u3888\0\u38d0\0\u02d0\0\u02d0\0\u0168\0\u3918\0\u3960"+
    "\0\u1050\0\u02d0\0\u39a8\0\u39f0\0\u02d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\13\3\16\1\17\2\13\1\20\1\21\1\13"+
    "\1\22\1\23\1\24\1\13\1\25\1\26\1\27\1\30"+
    "\1\31\1\13\1\32\1\33\1\34\1\35\1\6\1\16"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\13\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\2\13\1\73"+
    "\1\74\2\13\1\0\1\6\1\7\1\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\13\3\16\1\17\2\13"+
    "\1\20\1\21\1\13\1\22\1\23\1\24\1\13\1\25"+
    "\1\26\1\27\1\30\1\31\1\13\1\32\1\33\1\34"+
    "\1\35\1\6\1\16\1\36\1\37\1\40\1\41\1\75"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\13\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\2\13\1\73\1\74\2\13\1\0\1\76\1\77"+
    "\1\100\1\101\1\0\102\76\1\0\1\76\1\102\1\103"+
    "\1\76\1\0\23\76\1\104\6\76\1\105\47\76\1\0"+
    "\1\106\1\102\1\107\1\106\1\0\103\106\111\0\1\7"+
    "\110\0\1\110\44\0\1\111\43\0\1\112\1\0\1\113"+
    "\51\0\1\114\107\0\1\115\36\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\1\13\1\116\2\13\4\117\4\13\1\120\1\0"+
    "\1\121\3\13\2\0\4\13\1\120\3\0\1\117\24\0"+
    "\7\13\1\0\10\13\11\0\1\122\1\0\4\122\24\0"+
    "\1\122\24\0\1\123\27\0\1\124\1\122\1\0\4\16"+
    "\4\0\1\125\1\0\1\121\11\0\1\125\3\0\1\16"+
    "\24\0\1\123\27\0\1\126\1\122\1\0\4\127\2\130"+
    "\1\131\1\132\1\125\1\0\1\121\11\0\1\125\3\0"+
    "\1\127\24\0\1\123\26\0\15\13\2\0\3\13\2\0"+
    "\1\133\4\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\1\134\4\13\3\0"+
    "\1\13\24\0\7\13\1\0\10\13\24\0\1\135\33\0"+
    "\1\136\37\0\1\137\2\0\4\137\6\0\1\140\15\0"+
    "\1\137\53\0\15\13\2\0\1\13\1\25\1\13\2\0"+
    "\5\13\3\0\1\13\24\0\7\13\1\0\10\13\7\0"+
    "\15\13\1\0\1\141\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\1\0\30\26\1\142\57\26"+
    "\31\143\1\0\56\143\6\0\15\13\2\0\3\13\1\26"+
    "\1\0\4\13\1\144\3\0\1\13\1\36\23\0\2\13"+
    "\1\145\4\13\1\0\10\13\7\0\12\13\1\146\2\13"+
    "\2\0\3\13\1\26\1\0\5\13\3\0\1\13\1\36"+
    "\23\0\7\13\1\0\3\13\1\147\4\13\7\0\15\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\7\13"+
    "\1\0\1\150\7\13\7\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\1\13\1\151\1\152\4\13"+
    "\1\0\10\13\24\0\1\153\13\0\1\154\17\0\1\155"+
    "\70\0\1\156\16\0\1\157\30\0\43\36\1\142\44\36"+
    "\44\0\1\160\12\0\1\161\100\0\1\162\16\0\1\163"+
    "\4\0\1\164\72\0\1\165\107\0\1\166\107\0\1\167"+
    "\7\0\1\170\77\0\1\171\2\0\1\172\104\0\1\173"+
    "\3\0\1\174\1\175\102\0\1\176\107\0\1\177\36\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\1\13\1\200\3\13\1\201\1\13\1\0\1\202\3\13"+
    "\1\203\3\13\7\0\12\13\1\204\2\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\1\13\1\205\5\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\4\13\1\206\3\0\1\13\24\0"+
    "\7\13\1\0\10\13\7\0\12\13\1\207\2\13\2\0"+
    "\3\13\2\0\3\13\1\210\1\13\3\0\1\13\24\0"+
    "\1\13\1\211\5\13\1\0\10\13\7\0\12\13\1\212"+
    "\2\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\10\13\37\0\1\213\30\0\1\214\4\0"+
    "\1\215\21\0\15\13\2\0\3\13\2\0\4\13\1\216"+
    "\3\0\1\13\24\0\7\13\1\0\1\13\1\217\1\13"+
    "\1\220\2\13\1\221\1\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\7\13"+
    "\1\222\7\0\12\13\1\223\2\13\2\0\3\13\2\0"+
    "\3\13\1\224\1\13\3\0\1\13\24\0\3\13\1\225"+
    "\3\13\1\0\10\13\7\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\3\13\1\226\3\13\1\0"+
    "\10\13\1\0\1\111\1\0\2\111\1\0\43\111\1\227"+
    "\16\111\1\230\4\111\1\231\13\111\3\0\1\112\1\0"+
    "\1\113\103\0\1\102\107\0\1\232\106\0\1\233\1\0"+
    "\2\233\1\0\23\233\1\234\10\233\1\235\46\233\1\236"+
    "\1\0\2\236\1\0\32\236\1\0\1\234\1\0\46\236"+
    "\1\106\1\0\2\106\1\0\104\106\1\232\2\106\1\0"+
    "\103\106\1\111\1\0\2\111\1\0\103\111\1\112\1\0"+
    "\2\112\1\0\103\112\5\113\1\237\102\113\6\0\1\13"+
    "\1\117\2\13\4\117\4\13\1\120\1\0\1\121\3\13"+
    "\2\0\4\13\1\120\3\0\1\117\24\0\6\13\1\240"+
    "\1\0\10\13\7\0\1\13\1\117\2\13\4\117\4\13"+
    "\1\120\1\0\1\121\3\13\2\0\4\13\1\120\3\0"+
    "\1\117\24\0\7\13\1\0\10\13\7\0\15\13\1\241"+
    "\1\0\3\13\2\0\5\13\3\0\1\13\17\0\1\241"+
    "\4\0\7\13\1\0\10\13\1\0\24\137\1\0\63\137"+
    "\7\0\1\124\2\0\4\124\4\0\1\125\1\0\1\121"+
    "\11\0\1\125\3\0\1\124\54\0\1\242\2\0\4\242"+
    "\5\0\1\241\16\0\1\242\17\0\1\241\34\0\1\126"+
    "\2\0\4\126\4\0\1\125\1\0\1\121\11\0\1\125"+
    "\3\0\1\126\54\0\1\126\1\122\1\0\4\127\4\0"+
    "\1\125\1\0\1\121\11\0\1\125\3\0\1\127\24\0"+
    "\1\123\27\0\1\243\1\0\5\243\3\0\2\243\4\0"+
    "\1\243\3\0\1\243\1\0\2\243\3\0\1\243\30\0"+
    "\2\243\22\0\1\244\3\0\3\244\101\0\1\245\4\0"+
    "\2\245\100\0\15\13\2\0\3\13\2\0\4\13\1\246"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\10\0\1\137"+
    "\2\0\4\137\4\0\1\125\13\0\1\125\3\0\1\137"+
    "\24\0\1\247\44\0\1\250\71\0\2\251\1\0\1\251"+
    "\4\0\5\251\2\0\3\251\2\0\5\251\30\0\7\251"+
    "\1\0\10\251\32\0\1\252\64\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\1\13"+
    "\1\253\6\13\7\0\12\13\1\254\2\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\1\13\1\255\5\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\3\13\1\256\1\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\1\257"+
    "\7\13\7\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\3\13\1\260\3\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\1\261\7\13\60\0\1\262\107\0\1\263"+
    "\120\0\1\264\110\0\1\265\106\0\1\266\6\0\1\267"+
    "\67\0\1\270\36\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\7\13\1\0\1\13\1\271\6\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\7\13\1\0\5\13\1\272\2\13\7\0\15\13"+
    "\2\0\3\13\2\0\1\13\1\273\3\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\1\274\6\13\1\0"+
    "\1\275\7\13\7\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\5\13\1\276\1\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\1\277\4\13\3\0"+
    "\1\13\24\0\7\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\5\13\3\0\1\13\24\0\2\13\1\300"+
    "\4\13\1\0\10\13\7\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\7\13\1\0\1\13\1\301"+
    "\6\13\72\0\1\302\112\0\1\303\33\0\1\304\75\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\2\13\1\305\4\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\1\306\4\13\3\0\1\13\24\0\7\13"+
    "\1\0\10\13\7\0\15\13\2\0\3\13\2\0\3\13"+
    "\1\307\1\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\1\310\6\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\5\13\3\0\1\13\24\0\7\13\1\0"+
    "\5\13\1\311\2\13\7\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\4\13\1\312\2\13\1\0"+
    "\10\13\7\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\7\13\1\0\1\13\1\313\6\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\1\13\1\314\6\13\7\0\13\13\1\315"+
    "\1\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\10\13\1\0\1\111\1\0\2\111\1\0"+
    "\63\111\1\316\20\111\1\0\2\111\1\0\64\111\1\317"+
    "\16\111\13\0\4\233\2\0\1\233\6\0\1\233\1\0"+
    "\1\233\1\0\3\233\2\0\2\233\25\0\1\233\1\0"+
    "\1\233\1\0\1\233\3\0\1\233\7\0\3\113\1\320"+
    "\1\113\1\321\102\113\6\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\2\13\1\322\4\13\1\0"+
    "\10\13\10\0\1\242\2\0\4\242\24\0\1\242\54\0"+
    "\1\242\2\0\4\242\24\0\1\242\24\0\1\247\26\0"+
    "\15\13\2\0\3\13\2\0\3\13\1\323\1\13\3\0"+
    "\1\13\24\0\7\13\1\0\10\13\7\0\15\251\1\0"+
    "\4\251\2\0\5\251\3\0\1\251\24\0\7\251\1\0"+
    "\10\251\7\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\3\13\1\324\3\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\1\13\1\325\3\13\3\0"+
    "\1\13\24\0\7\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\5\13\3\0\1\13\24\0\7\13\1\0"+
    "\1\326\1\327\6\13\7\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\1\13\1\330\5\13\1\0"+
    "\10\13\7\0\15\13\2\0\3\13\2\0\4\13\1\331"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\7\13"+
    "\1\0\4\13\1\332\3\13\7\0\15\13\2\0\3\13"+
    "\2\0\4\13\1\333\3\0\1\13\24\0\7\13\1\0"+
    "\10\13\34\0\1\334\111\0\1\335\54\0\1\336\107\0"+
    "\1\337\113\0\15\13\2\0\3\13\2\0\4\13\1\340"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\7\0\12\13"+
    "\1\341\2\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\2\13"+
    "\1\342\5\13\7\0\12\13\1\343\2\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\3\13\1\344\1\13"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\3\13\1\345\1\346\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\2\13\1\347\4\13"+
    "\1\0\10\13\7\0\12\13\1\350\2\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\100\0\1\351\42\0\1\352\63\0\15\13\2\0\3\13"+
    "\2\0\4\13\1\353\3\0\1\13\24\0\7\13\1\0"+
    "\10\13\7\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\3\13\1\354\3\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\1\355\4\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\7\13\1\0\1\13"+
    "\1\356\6\13\7\0\15\13\2\0\3\13\2\0\4\13"+
    "\1\357\3\0\1\13\24\0\7\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\3\13\1\360\3\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\1\13\1\361\3\13\3\0\1\13\24\0"+
    "\7\13\1\0\10\13\1\0\1\111\1\0\2\111\1\0"+
    "\26\111\1\362\55\111\1\0\2\111\1\0\30\111\1\363"+
    "\52\111\6\0\12\13\1\364\2\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\7\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\2\13\1\365\5\13\7\0\15\13\2\0"+
    "\3\13\2\0\1\366\4\13\3\0\1\13\24\0\7\13"+
    "\1\0\10\13\7\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\7\13\1\0\2\13\1\367\5\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\7\13\1\0\1\13\1\370\6\13\7\0\15\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\1\371"+
    "\6\13\1\0\10\13\7\0\15\13\2\0\3\13\2\0"+
    "\1\372\4\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\72\0\1\373\113\0\1\374\20\0\15\13\2\0\3\13"+
    "\2\0\1\375\4\13\3\0\1\13\24\0\7\13\1\0"+
    "\10\13\7\0\15\13\2\0\3\13\2\0\1\376\4\13"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\1\13"+
    "\1\377\5\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\5\13\1\u0100\1\13"+
    "\1\0\10\13\7\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\3\13\1\u0101\3\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\1\u0102\4\13\3\0"+
    "\1\13\24\0\7\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\5\13\3\0\1\13\24\0\7\13\1\0"+
    "\1\13\1\u0103\6\13\37\0\1\u0104\57\0\15\13\2\0"+
    "\3\13\2\0\1\13\1\u0105\3\13\3\0\1\13\24\0"+
    "\7\13\1\0\10\13\7\0\15\13\2\0\3\13\2\0"+
    "\1\13\1\u0106\3\13\3\0\1\13\24\0\7\13\1\0"+
    "\10\13\7\0\15\13\2\0\3\13\2\0\4\13\1\u0107"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\1\13\1\u0108\3\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\2\13\1\u0109\4\13"+
    "\1\0\10\13\7\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\7\13\1\0\3\13\1\u010a\4\13"+
    "\1\0\1\111\1\0\2\111\1\0\64\111\1\u010b\17\111"+
    "\1\0\2\111\1\0\70\111\1\u010c\12\111\6\0\13\13"+
    "\1\u010d\1\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\15\13\2\0\3\13"+
    "\2\0\5\13\3\0\1\13\24\0\1\13\1\u010e\5\13"+
    "\1\0\10\13\7\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\1\13\1\u010f\5\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\7\13\1\0\1\13\1\u0110\6\13\73\0\1\u0111"+
    "\23\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\5\13\1\u0112\1\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\7\13"+
    "\1\0\1\13\1\u0113\6\13\7\0\15\13\2\0\3\13"+
    "\2\0\4\13\1\u0114\3\0\1\13\24\0\7\13\1\0"+
    "\10\13\7\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\2\13\1\u0115\4\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\3\13\1\u0116\4\13\7\0\15\13\2\0"+
    "\3\13\2\0\5\13\3\0\1\13\24\0\7\13\1\0"+
    "\1\13\1\u0117\6\13\7\0\15\13\2\0\3\13\2\0"+
    "\5\13\3\0\1\13\24\0\7\13\1\0\1\13\1\u0118"+
    "\6\13\7\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\4\13\1\u0119\2\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\7\13\1\0\3\13\1\u011a\4\13\7\0\15\13\2\0"+
    "\3\13\2\0\4\13\1\u011b\3\0\1\13\24\0\7\13"+
    "\1\0\10\13\1\0\1\111\1\0\2\111\1\0\65\111"+
    "\1\u011c\15\111\6\0\15\13\2\0\3\13\2\0\3\13"+
    "\1\u011d\1\13\3\0\1\13\24\0\7\13\1\0\10\13"+
    "\7\0\15\13\2\0\3\13\2\0\5\13\3\0\1\13"+
    "\24\0\3\13\1\u011e\3\13\1\0\10\13\74\0\1\u011f"+
    "\22\0\15\13\2\0\3\13\2\0\3\13\1\u0120\1\13"+
    "\3\0\1\13\24\0\7\13\1\0\10\13\7\0\15\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\7\13"+
    "\1\0\1\13\1\u0121\6\13\7\0\15\13\2\0\3\13"+
    "\2\0\1\u0122\4\13\3\0\1\13\24\0\7\13\1\0"+
    "\10\13\1\0\1\111\1\0\2\111\1\0\66\111\1\u0123"+
    "\14\111\6\0\15\13\2\0\3\13\2\0\5\13\3\0"+
    "\1\13\24\0\2\13\1\u0124\4\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\4\13\1\u0125\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\37\0\1\u0126\57\0\15\13"+
    "\2\0\3\13\2\0\1\13\1\u0127\3\13\3\0\1\13"+
    "\24\0\7\13\1\0\10\13\7\0\12\13\1\u0128\2\13"+
    "\2\0\3\13\2\0\5\13\3\0\1\13\24\0\7\13"+
    "\1\0\10\13\1\0\1\111\1\0\2\111\1\0\31\111"+
    "\1\u0129\51\111\6\0\15\13\2\0\3\13\2\0\4\13"+
    "\1\u012a\3\0\1\13\24\0\7\13\1\0\10\13\7\0"+
    "\15\13\2\0\3\13\2\0\5\13\3\0\1\13\24\0"+
    "\3\13\1\u012b\3\13\1\0\10\13\7\0\15\13\2\0"+
    "\3\13\2\0\5\13\3\0\1\13\24\0\6\13\1\u012c"+
    "\1\0\10\13\7\0\15\13\2\0\3\13\2\0\5\13"+
    "\3\0\1\13\24\0\7\13\1\0\3\13\1\u012d\4\13"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\31\1\2\11\1\1\4\11\1\1\2\11"+
    "\2\1\1\11\4\1\1\11\14\1\3\11\7\1\1\0"+
    "\3\1\2\11\3\1\2\0\1\11\1\1\6\0\2\1"+
    "\2\11\2\1\1\0\1\11\1\0\7\1\1\11\1\1"+
    "\1\11\1\1\4\11\2\0\3\11\1\0\4\11\1\1"+
    "\2\11\13\1\3\0\14\1\1\11\1\0\1\11\2\0"+
    "\2\1\1\0\5\1\2\11\1\1\1\11\7\1\2\11"+
    "\4\0\1\11\11\1\1\0\1\11\1\0\13\1\1\11"+
    "\1\0\12\1\2\0\13\1\1\0\1\11\20\1\1\0"+
    "\1\11\7\1\1\11\14\1\1\0\15\1\1\0\6\1"+
    "\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VlangLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 117: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 118: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 119: break;
          case 4: 
            { return QUOTIENT;
            } 
            // fall through
          case 120: break;
          case 5: 
            { return MUL;
            } 
            // fall through
          case 121: break;
          case 6: 
            { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;
            } 
            // fall through
          case 122: break;
          case 7: 
            { yybegin(MAYBE_SEMICOLON); return INT;
            } 
            // fall through
          case 123: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 124: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 125: break;
          case 10: 
            { yybegin(MAYBE_SEMICOLON); return RAW_STRING;
            } 
            // fall through
          case 126: break;
          case 11: 
            { return LESS;
            } 
            // fall through
          case 127: break;
          case 12: 
            { return GREATER;
            } 
            // fall through
          case 128: break;
          case 13: 
            { return BIT_OR;
            } 
            // fall through
          case 129: break;
          case 14: 
            { return LBRACE;
            } 
            // fall through
          case 130: break;
          case 15: 
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            } 
            // fall through
          case 131: break;
          case 16: 
            { return LBRACK;
            } 
            // fall through
          case 132: break;
          case 17: 
            { yybegin(MAYBE_SEMICOLON); return RBRACK;
            } 
            // fall through
          case 133: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 134: break;
          case 19: 
            { yybegin(MAYBE_SEMICOLON); return RPAREN;
            } 
            // fall through
          case 135: break;
          case 20: 
            { return COLON;
            } 
            // fall through
          case 136: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 137: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 138: break;
          case 23: 
            { return ASSIGN;
            } 
            // fall through
          case 139: break;
          case 24: 
            { yybegin(MAYBE_SEMICOLON); return NOT;
            } 
            // fall through
          case 140: break;
          case 25: 
            { yybegin(MAYBE_SEMICOLON); return QUESTION;
            } 
            // fall through
          case 141: break;
          case 26: 
            { return PLUS;
            } 
            // fall through
          case 142: break;
          case 27: 
            { return BIT_AND;
            } 
            // fall through
          case 143: break;
          case 28: 
            { return BIT_XOR;
            } 
            // fall through
          case 144: break;
          case 29: 
            { return REMAINDER;
            } 
            // fall through
          case 145: break;
          case 30: 
            { return AT;
            } 
            // fall through
          case 146: break;
          case 31: 
            { yybegin(MAYBE_SEMICOLON); return LANGUAGE_INJECTION;
            } 
            // fall through
          case 147: break;
          case 32: 
            { yybegin(YYINITIAL); yypushback(yytext().length());
            } 
            // fall through
          case 148: break;
          case 33: 
            { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 149: break;
          case 34: 
            { yybegin(YYINITIAL); return NLS;
            } 
            // fall through
          case 150: break;
          case 35: 
            { yybegin(MAYBE_SEMICOLON); return C_FLAG_VALUE;
            } 
            // fall through
          case 151: break;
          case 36: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 152: break;
          case 37: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 153: break;
          case 38: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 154: break;
          case 39: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 155: break;
          case 40: 
            { yybegin(MAYBE_SEMICOLON); return DECIMALI;
            } 
            // fall through
          case 156: break;
          case 41: 
            { return OR ;
            } 
            // fall through
          case 157: break;
          case 42: 
            { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;
            } 
            // fall through
          case 158: break;
          case 43: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 159: break;
          case 44: 
            { yybegin(MAYBE_SEMICOLON); return FLOAT;
            } 
            // fall through
          case 160: break;
          case 45: 
            { return RANGE;
            } 
            // fall through
          case 161: break;
          case 46: 
            { return AS ;
            } 
            // fall through
          case 162: break;
          case 47: 
            { return SEND_CHANNEL;
            } 
            // fall through
          case 163: break;
          case 48: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 164: break;
          case 49: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 165: break;
          case 50: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 166: break;
          case 51: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 167: break;
          case 52: 
            { return COND_OR;
            } 
            // fall through
          case 168: break;
          case 53: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 169: break;
          case 54: 
            { return HASH_LBRACK;
            } 
            // fall through
          case 170: break;
          case 55: 
            { return VAR_ASSIGN;
            } 
            // fall through
          case 171: break;
          case 56: 
            { return EQ;
            } 
            // fall through
          case 172: break;
          case 57: 
            { return NOT_EQ;
            } 
            // fall through
          case 173: break;
          case 58: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 174: break;
          case 59: 
            { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;
            } 
            // fall through
          case 175: break;
          case 60: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 176: break;
          case 61: 
            { return COND_AND;
            } 
            // fall through
          case 177: break;
          case 62: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 178: break;
          case 63: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 179: break;
          case 64: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 180: break;
          case 65: 
            { return IN;
            } 
            // fall through
          case 181: break;
          case 66: 
            { return IF ;
            } 
            // fall through
          case 182: break;
          case 67: 
            { return IS;
            } 
            // fall through
          case 183: break;
          case 68: 
            { return FN;
            } 
            // fall through
          case 184: break;
          case 69: 
            { return GO;
            } 
            // fall through
          case 185: break;
          case 70: 
            { yybegin(YYINITIAL); return WS;
            } 
            // fall through
          case 186: break;
          case 71: 
            { yybegin(MAYBE_SEMICOLON); return STRING;
            } 
            // fall through
          case 187: break;
          case 72: 
            { yybegin(MAYBE_SEMICOLON); return HEX;
            } 
            // fall through
          case 188: break;
          case 73: 
            { yybegin(MAYBE_SEMICOLON); return OCT;
            } 
            // fall through
          case 189: break;
          case 74: 
            { yybegin(MAYBE_SEMICOLON); return BIN;
            } 
            // fall through
          case 190: break;
          case 75: 
            { yybegin(MAYBE_SEMICOLON); return FLOATI;
            } 
            // fall through
          case 191: break;
          case 76: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 192: break;
          case 77: 
            { yybegin(MAYBE_SEMICOLON); return CHAR;
            } 
            // fall through
          case 193: break;
          case 78: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 194: break;
          case 79: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 195: break;
          case 80: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 196: break;
          case 81: 
            { return FOR ;
            } 
            // fall through
          case 197: break;
          case 82: 
            { return IF_COMPILE_TIME ;
            } 
            // fall through
          case 198: break;
          case 83: 
            { return MUT;
            } 
            // fall through
          case 199: break;
          case 84: 
            { return PUB;
            } 
            // fall through
          case 200: break;
          case 85: 
            { return CHAN;
            } 
            // fall through
          case 201: break;
          case 86: 
            { return ENUM;
            } 
            // fall through
          case 202: break;
          case 87: 
            { return ELSE;
            } 
            // fall through
          case 203: break;
          case 88: 
            { return NOT_IN;
            } 
            // fall through
          case 204: break;
          case 89: 
            { return NOT_IS;
            } 
            // fall through
          case 205: break;
          case 90: 
            { return LOCK;
            } 
            // fall through
          case 206: break;
          case 91: 
            { return GOTO;
            } 
            // fall through
          case 207: break;
          case 92: 
            { return FOR_COMPILE_TIME ;
            } 
            // fall through
          case 208: break;
          case 93: 
            { return TYPE_;
            } 
            // fall through
          case 209: break;
          case 94: 
            { yybegin(MAYBE_SEMICOLON); return BREAK;
            } 
            // fall through
          case 210: break;
          case 95: 
            { return RLOCK;
            } 
            // fall through
          case 211: break;
          case 96: 
            { return CONST;
            } 
            // fall through
          case 212: break;
          case 97: 
            { yybegin(C_FLAG_VALUE_EXPECTED); return C_FLAG;
            } 
            // fall through
          case 213: break;
          case 98: 
            { return UNION;
            } 
            // fall through
          case 214: break;
          case 99: 
            { return DEFER;
            } 
            // fall through
          case 215: break;
          case 100: 
            { return ELSE_COMPILE_TIME ;
            } 
            // fall through
          case 216: break;
          case 101: 
            { return MATCH ;
            } 
            // fall through
          case 217: break;
          case 102: 
            { yybegin(MAYBE_SEMICOLON); return RETURN ;
            } 
            // fall through
          case 218: break;
          case 103: 
            { return ASSERT;
            } 
            // fall through
          case 219: break;
          case 104: 
            { return IMPORT ;
            } 
            // fall through
          case 220: break;
          case 105: 
            { return UNSAFE;
            } 
            // fall through
          case 221: break;
          case 106: 
            { return SELECT;
            } 
            // fall through
          case 222: break;
          case 107: 
            { return STRUCT;
            } 
            // fall through
          case 223: break;
          case 108: 
            { return SHARED;
            } 
            // fall through
          case 224: break;
          case 109: 
            { return SWITCH;
            } 
            // fall through
          case 225: break;
          case 110: 
            { return MODULE;
            } 
            // fall through
          case 226: break;
          case 111: 
            { return DEFAULT;
            } 
            // fall through
          case 227: break;
          case 112: 
            { return BUILTIN_GLOBAL;
            } 
            // fall through
          case 228: break;
          case 113: 
            { yybegin(MAYBE_SEMICOLON); return CONTINUE ;
            } 
            // fall through
          case 229: break;
          case 114: 
            { yybegin(C_STRING_LITERAL); return C_INCLUDE;
            } 
            // fall through
          case 230: break;
          case 115: 
            { return INTERFACE;
            } 
            // fall through
          case 231: break;
          case 116: 
            { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;
            } 
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
