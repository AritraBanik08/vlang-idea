/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.vlang.lang.psi.VlangDocTokenTypes.DOC_COMMENT;
import static org.vlang.lang.psi.VlangTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>v.flex</tt>
 */
public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int TEMPLATE_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int SHORT_TEMPLATE_ENTRY_FIELD_NAME = 8;
  public static final int ASM_BLOCK = 10;
  public static final int ASM_BLOCK_LINE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\37\1\40\1\4\22\0\1\2\1\60\1\30\1\47\1\34\1\66\1\63\1\31\1"+
    "\52\1\53\1\5\1\62\1\56\1\23\1\24\1\3\1\15\1\14\6\13\2\12\1\54\1\55\1\65\1"+
    "\57\1\70\1\61\1\67\2\11\1\27\1\11\1\22\1\11\3\6\1\25\10\6\1\26\1\6\1\43\2"+
    "\6\1\17\2\6\1\50\1\36\1\51\1\64\1\7\1\41\1\100\1\21\1\32\1\105\1\73\1\71\1"+
    "\103\1\102\1\72\1\6\1\101\1\74\1\104\1\76\1\20\1\106\1\6\1\33\1\75\1\77\1"+
    "\42\1\111\1\107\1\16\1\110\1\6\1\35\1\45\1\46\1\44\6\0\1\37\24\0\1\6\12\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\12\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1"+
    "\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\23\6\1\0\13\6\10"+
    "\0\6\6\1\0\26\6\2\0\1\6\6\0\10\6\10\0\13\6\5\0\3\6\15\0\12\10\4\0\6\6\1\0"+
    "\1\6\17\0\2\6\7\0\2\6\12\10\3\6\2\0\2\6\1\0\16\6\15\0\11\6\13\0\1\6\16\0\12"+
    "\10\6\6\4\0\2\6\4\0\1\6\5\0\6\6\4\0\1\6\11\0\1\6\3\0\1\6\7\0\11\6\7\0\5\6"+
    "\1\0\10\6\6\0\26\6\3\0\1\6\2\0\1\6\7\0\12\6\4\0\12\10\1\6\4\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0\2\6\1\0\1\6\5\0\6"+
    "\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\17\0\4\6\1\0\1\6\7\0\12\10\2\0\3\6\20\0"+
    "\11\6\1\0\2\6\1\0\2\6\1\0\5\6\3\0\1\6\2\0\1\6\30\0\1\6\13\0\10\6\2\0\1\6\3"+
    "\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\13\0\10\6\1\0\2\6\10\0\3\6\5\0\1\6\4\0\10\6\1\0\6\6\1\0\5\6\3\0\1\6"+
    "\3\0\2\6\15\0\13\6\2\0\1\6\6\0\3\6\10\0\1\6\12\0\6\6\5\0\22\6\3\0\10\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\11\0\1\6\1\0\2\6\14\0\12\10\7\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1"+
    "\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\10\2\0\14\6\1\0\24\6\13\0\5\6\22\0"+
    "\7\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1\6\1\0\6\6\1\0\1\6\5\0"+
    "\1\6\2\0\13\6\1\0\15\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\16\6\2\0\6\6\2\0\15\6\2\0\1\6\1\0\10\6\7\0\15\6\1"+
    "\0\6\6\23\0\1\6\4\0\1\6\3\0\5\6\2\0\22\6\1\0\1\6\5\0\17\6\1\0\16\6\2\0\5\6"+
    "\13\0\14\6\13\0\1\6\15\0\7\6\7\0\16\6\15\0\2\6\12\10\3\0\3\6\11\0\4\6\1\0"+
    "\4\6\3\0\2\6\11\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\6\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\14\0\2\37\7\0\1\6\15\0\1\6\2\0\1\6\4\0\1\6\2"+
    "\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5"+
    "\0\5\6\4\0\1\6\4\0\2\6\13\0\5\6\6\0\4\6\3\0\2\6\14\0\10\6\7\0\10\6\1\0\7\6"+
    "\6\0\2\6\12\0\5\6\5\0\2\6\3\0\7\6\6\0\3\6\12\10\2\6\13\0\11\6\2\0\27\6\2\0"+
    "\7\6\1\0\3\6\1\0\4\6\1\0\4\6\2\0\6\6\3\0\1\6\1\0\1\6\2\0\5\6\1\0\12\6\12\10"+
    "\5\6\1\0\3\6\1\0\10\6\4\0\7\6\3\0\1\6\3\0\2\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\0\1\6\30\0\3\6\3\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\4\0\5\6\3\0\5\6\5\0"+
    "\1\6\1\0\10\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\12\6\6\0\12\6\2\0\6\6\2"+
    "\0\6\6\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2\6\1\0\2\6\1\0\10\6\6\0\4\6"+
    "\4\0\16\6\2\0\1\6\1\0\14\6\1\0\2\6\3\0\1\6\2\0\4\6\1\0\2\6\12\0\10\6\6\0\6"+
    "\6\1\0\3\6\1\0\12\6\3\0\1\6\12\0\4\6\13\0\12\10\1\6\1\0\1\6\3\0\7\6\1\0\1"+
    "\6\1\0\4\6\1\0\17\6\1\0\2\6\14\0\3\6\7\0\4\6\11\0\2\6\1\0\1\6\20\0\4\6\10"+
    "\0\1\6\13\0\10\6\5\0\3\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6"+
    "\1\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\14"+
    "\6\2\0\13\6\1\0\10\6\2\0\22\10\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1"+
    "\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4"+
    "\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\5\6\1\0\3\6\1\0\5\6\1\0\5\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\2\7\2\6\1\10\1\11\2\6\1\12\1\13\2\6"+
    "\1\1\1\14\1\15\1\6\1\16\1\17\1\20\1\1"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\15\6\1\42\1\43\1\44\1\3\1\43\1\45"+
    "\1\46\1\47\1\50\1\0\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\51\1\11\1\57\1\52\1\60\1\61"+
    "\1\0\1\42\1\62\1\63\1\64\1\65\1\6\1\0"+
    "\1\66\6\0\1\67\1\6\1\70\1\71\1\72\1\73"+
    "\1\0\1\6\2\0\5\6\1\0\1\74\1\0\1\6"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\0\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\0\1\6\1\116\1\6\1\117\1\120"+
    "\1\121\13\6\1\122\1\123\6\6\1\77\1\63\1\124"+
    "\1\125\1\126\1\127\1\52\1\130\1\6\1\7\1\72"+
    "\1\0\1\131\1\132\1\133\1\6\1\0\1\134\1\135"+
    "\2\6\1\136\3\6\1\137\1\6\1\74\2\0\1\140"+
    "\2\0\2\6\2\0\1\141\1\142\1\143\1\0\1\144"+
    "\13\6\1\145\3\6\1\146\2\6\1\147\2\6\1\150"+
    "\1\6\1\63\1\52\1\130\1\6\4\0\5\6\1\151"+
    "\1\6\4\0\2\6\1\152\1\153\1\154\4\6\1\155"+
    "\1\156\1\157\5\6\1\160\1\161\1\6\1\162\4\6"+
    "\1\63\1\0\1\52\1\130\1\0\1\6\1\163\1\164"+
    "\2\6\1\165\1\166\2\74\2\0\1\167\2\6\1\170"+
    "\11\6\1\171\1\172\1\6\1\52\2\6\1\173\4\0"+
    "\1\174\2\6\1\175\1\176\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\1\6\1\52\2\6\3\0\3\6\1\52"+
    "\1\205\1\206\2\0\2\6\2\207\2\74\1\6\1\210"+
    "\2\0\1\6\1\0\1\211\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456"+
    "\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6"+
    "\0\u0250\0\u0250\0\u06f0\0\u073a\0\u0784\0\u0250\0\u07ce\0\u0818"+
    "\0\u0250\0\u0862\0\u0250\0\u08ac\0\u0250\0\u0250\0\u0250\0\u0250"+
    "\0\u08f6\0\u0250\0\u0250\0\u0940\0\u098a\0\u0250\0\u09d4\0\u0a1e"+
    "\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0c6e"+
    "\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe"+
    "\0\u0f08\0\u0f52\0\u0f9c\0\u0250\0\u0250\0\u0250\0\u0fe6\0\u1030"+
    "\0\u0250\0\u0250\0\u107a\0\u10c4\0\u0250\0\u110e\0\u0250\0\u0250"+
    "\0\u0250\0\u1158\0\u11a2\0\u0250\0\u0250\0\u11ec\0\u1236\0\u0250"+
    "\0\u02e4\0\u1280\0\u12ca\0\u1314\0\u0250\0\u0250\0\u135e\0\u0456"+
    "\0\u0250\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u03c2"+
    "\0\u1564\0\u0250\0\u0250\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6"+
    "\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u18dc"+
    "\0\u1926\0\u1970\0\u0250\0\u0250\0\u0250\0\u0250\0\u0250\0\u0250"+
    "\0\u19ba\0\u0250\0\u0250\0\u0250\0\u0250\0\u1a04\0\u0250\0\u0250"+
    "\0\u0250\0\u1a4e\0\u0250\0\u0250\0\u1a98\0\u1ae2\0\u03c2\0\u1b2c"+
    "\0\u03c2\0\u03c2\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38"+
    "\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u1280\0\u213e"+
    "\0\u0250\0\u0250\0\u0250\0\u0250\0\u2188\0\u21d2\0\u221c\0\u2266"+
    "\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u0250"+
    "\0\u0250\0\u24b6\0\u2500\0\u0250\0\u254a\0\u2594\0\u25de\0\u03c2"+
    "\0\u2628\0\u0250\0\u2672\0\u26bc\0\u18dc\0\u2706\0\u2750\0\u279a"+
    "\0\u27e4\0\u282e\0\u2878\0\u0250\0\u0250\0\u0250\0\u28c2\0\u03c2"+
    "\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12"+
    "\0\u2b5c\0\u2ba6\0\u2bf0\0\u03c2\0\u2c3a\0\u2c84\0\u2cce\0\u03c2"+
    "\0\u2d18\0\u2d62\0\u03c2\0\u2dac\0\u2df6\0\u03c2\0\u2e40\0\u2e8a"+
    "\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2344\0\u238e\0\u23d8\0\u2ffc"+
    "\0\u3046\0\u3090\0\u30da\0\u3124\0\u03c2\0\u316e\0\u31b8\0\u3202"+
    "\0\u324c\0\u3296\0\u32e0\0\u332a\0\u282e\0\u2878\0\u0250\0\u3374"+
    "\0\u33be\0\u3408\0\u3452\0\u03c2\0\u03c2\0\u03c2\0\u349c\0\u34e6"+
    "\0\u3530\0\u357a\0\u35c4\0\u03c2\0\u03c2\0\u360e\0\u03c2\0\u3658"+
    "\0\u36a2\0\u36ec\0\u3736\0\u0250\0\u2e8a\0\u3780\0\u0250\0\u2f1e"+
    "\0\u37ca\0\u03c2\0\u03c2\0\u3814\0\u385e\0\u03c2\0\u03c2\0\u38a8"+
    "\0\u38f2\0\u393c\0\u3986\0\u03c2\0\u39d0\0\u3a1a\0\u03c2\0\u3a64"+
    "\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4"+
    "\0\u03c2\0\u03c2\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc\0\u03c2\0\u3e26"+
    "\0\u3e70\0\u3eba\0\u3f04\0\u03c2\0\u3f4e\0\u3f98\0\u03c2\0\u03c2"+
    "\0\u03c2\0\u03c2\0\u03c2\0\u03c2\0\u03c2\0\u03c2\0\u3fe2\0\u402c"+
    "\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u427c"+
    "\0\u42c6\0\u03c2\0\u03c2\0\u4310\0\u435a\0\u43a4\0\u43ee\0\u03c2"+
    "\0\u110e\0\u4438\0\u4482\0\u44cc\0\u03c2\0\u4516\0\u4560\0\u45aa"+
    "\0\u45f4\0\u03c2\0\u463e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\0\1\15\1\16\1\17"+
    "\1\20\1\16\3\21\1\22\2\16\1\23\1\24\1\16"+
    "\1\25\1\26\1\27\1\16\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\11\1\0\1\13\1\37\1\40"+
    "\1\16\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\2\16\1\76"+
    "\1\77\1\100\1\101\2\16\1\102\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\16\3\21"+
    "\1\22\2\16\1\23\1\24\1\16\1\25\1\26\1\27"+
    "\1\16\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\11\1\0\1\13\1\37\1\40\1\16\1\41\1\42"+
    "\1\43\1\103\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\2\16\1\76\1\77\1\100\1\101"+
    "\2\16\1\102\1\104\1\105\1\106\1\107\1\0\32\104"+
    "\1\0\1\106\51\104\30\110\1\111\1\112\2\110\1\113"+
    "\1\110\1\114\53\110\4\115\1\0\1\115\2\116\1\115"+
    "\1\116\4\115\5\116\1\115\1\117\3\116\1\120\1\121"+
    "\2\116\1\122\1\115\1\123\2\0\1\115\2\116\25\115"+
    "\21\116\4\115\1\0\1\115\2\116\1\115\1\116\4\115"+
    "\5\116\1\115\1\124\3\116\1\120\1\121\2\116\2\115"+
    "\1\123\2\0\1\115\2\116\25\115\21\116\1\0\1\12"+
    "\1\106\3\0\2\116\1\0\1\116\4\0\5\116\2\0"+
    "\3\116\2\0\2\116\1\0\1\125\2\0\1\106\1\0"+
    "\2\116\25\0\20\116\1\126\1\127\1\12\2\127\1\0"+
    "\41\127\1\130\43\127\113\0\1\12\112\0\1\131\35\0"+
    "\1\131\6\0\1\132\45\0\1\133\1\0\1\134\51\0"+
    "\1\135\111\0\1\136\40\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\21\16\6\0\1\16\1\137"+
    "\13\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\21\16\10\0\1\140\1\0\4\140\54\0\1\141\26\0"+
    "\1\142\1\140\1\0\4\21\4\0\1\143\1\0\1\144"+
    "\45\0\1\141\1\143\25\0\1\142\1\140\1\0\4\21"+
    "\2\145\1\146\1\147\1\143\1\0\1\144\45\0\1\141"+
    "\1\143\24\0\15\16\2\0\3\16\2\0\1\16\1\150"+
    "\6\0\2\16\25\0\21\16\6\0\15\16\2\0\3\16"+
    "\2\0\1\16\1\151\6\0\2\16\25\0\21\16\23\0"+
    "\1\152\33\0\1\153\44\0\4\154\6\0\1\155\73\0"+
    "\15\16\2\0\1\16\1\30\1\16\2\0\2\16\6\0"+
    "\2\16\25\0\21\16\6\0\15\16\1\0\1\156\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\21\16\6\0\12\16"+
    "\1\157\2\16\2\0\3\16\1\31\1\32\2\16\6\0"+
    "\2\16\25\0\21\16\6\0\15\16\2\0\3\16\1\160"+
    "\1\161\2\16\6\0\2\16\25\0\2\16\1\162\1\163"+
    "\15\16\6\0\2\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\1\164\1\165"+
    "\1\166\16\16\1\167\1\170\34\167\1\171\2\167\1\170"+
    "\50\167\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\5\16\1\172\13\16\45\0\1\173\11\0"+
    "\1\174\102\0\1\175\120\0\1\176\111\0\1\177\111\0"+
    "\1\200\12\0\1\201\76\0\1\202\2\0\1\203\106\0"+
    "\1\204\3\0\1\205\1\206\104\0\1\207\55\0\1\210"+
    "\33\0\1\211\5\0\1\212\103\0\1\213\40\0\2\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\21\16\57\0\1\214\10\0\1\215"+
    "\27\0\12\16\1\216\2\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\5\16\1\217\1\16\1\220\11\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\1\221\3\16\1\222\1\223\5\16\1\224\5\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\3\16\1\225\1\16\1\226\13\16\6\0\12\16"+
    "\1\227\2\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\2\16\1\230\3\16\1\231\2\16"+
    "\1\232\4\16\1\233\2\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\1\16\1\234\17\16"+
    "\6\0\15\16\2\0\3\16\2\0\1\16\1\235\6\0"+
    "\2\16\25\0\17\16\1\236\1\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\4\16\1\237"+
    "\14\16\6\0\12\16\1\240\2\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\21\16\6\0\12\16\1\241"+
    "\2\16\2\0\3\16\2\0\2\16\6\0\1\242\1\16"+
    "\25\0\7\16\1\243\11\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\2\16\1\244\16\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\1\245"+
    "\1\16\25\0\21\16\6\0\12\16\1\246\2\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\21\16\1\132"+
    "\1\0\2\132\1\0\43\132\1\247\41\132\3\0\1\133"+
    "\1\0\1\250\104\0\30\110\2\0\2\110\1\0\1\110"+
    "\1\0\53\110\35\0\1\251\54\0\1\252\1\0\2\252"+
    "\1\0\32\252\2\0\51\252\6\0\15\116\2\0\3\116"+
    "\2\0\2\116\6\0\2\116\25\0\21\116\35\0\1\253"+
    "\54\0\1\254\1\0\2\254\1\0\32\254\2\0\51\254"+
    "\6\0\12\116\1\255\2\116\2\0\3\116\2\0\2\116"+
    "\6\0\2\116\25\0\21\116\1\127\1\0\2\127\1\0"+
    "\41\127\1\0\43\127\1\132\1\0\2\132\1\0\105\132"+
    "\1\133\1\0\2\133\1\0\105\133\5\250\1\256\104\250"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\12\16\1\257\6\16\7\0\1\142\2\0\4\260"+
    "\106\0\4\261\5\0\1\262\36\0\1\262\41\0\4\154"+
    "\105\0\5\263\3\0\2\263\4\0\1\263\2\0\1\263"+
    "\36\0\1\263\1\0\1\263\4\0\1\263\4\0\1\263"+
    "\17\0\3\264\110\0\2\265\102\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\2\16\1\266\16\16"+
    "\7\0\1\267\2\0\4\154\4\0\1\143\47\0\1\270"+
    "\1\143\42\0\1\271\73\0\2\272\1\0\1\272\4\0"+
    "\5\272\2\0\3\272\2\0\2\272\6\0\2\272\25\0"+
    "\21\272\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\5\16\1\273\13\16\30\160\1\274\61\160"+
    "\31\161\1\274\60\161\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\6\16\1\275\12\16\6\0"+
    "\12\16\1\276\2\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\21\16\6\0\12\16\1\277\2\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\21\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\1\300\20\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\3\16\1\301\15\16\41\0\1\302"+
    "\50\0\1\167\1\0\2\167\1\0\6\167\3\303\1\304"+
    "\20\167\2\0\1\305\1\306\1\307\46\167\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\1\16"+
    "\1\310\2\16\1\311\14\16\75\0\1\312\1\313\72\0"+
    "\1\314\111\0\1\315\111\0\1\316\10\0\1\317\27\0"+
    "\15\16\2\0\3\16\2\0\1\16\1\320\6\0\2\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\3\16\1\321\15\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\6\16"+
    "\1\322\12\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\15\16\1\323\3\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\4\16"+
    "\1\324\14\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\1\325\1\16\25\0\21\16\6\0\15\16\2\0"+
    "\3\16\2\0\1\326\1\16\6\0\2\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\3\16\1\327\15\16\6\0\15\16\2\0\3\16"+
    "\2\0\1\16\1\330\6\0\2\16\25\0\7\16\1\331"+
    "\11\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\7\16\1\332\11\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\1\16\1\333"+
    "\17\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\3\16\1\334\15\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\1\335\1\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\15\16\1\336\3\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\4\16\1\337\6\16"+
    "\1\340\5\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\6\16\1\341\12\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\14\16"+
    "\1\342\4\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\6\16\1\343\12\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\6\16"+
    "\1\344\12\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\1\345\20\16\6\0\13\16\1\346"+
    "\1\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\21\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\3\16\1\347\15\16\5\250\1\350\104\250"+
    "\6\0\15\116\2\0\3\116\2\0\2\116\6\0\2\116"+
    "\25\0\3\116\1\351\15\116\5\256\1\352\104\256\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\3\16\1\353\15\16\7\0\1\142\2\0\4\260\4\0"+
    "\1\143\1\0\1\144\46\0\1\143\25\0\1\354\2\0"+
    "\4\261\54\0\1\270\31\0\4\261\103\0\1\355\1\0"+
    "\5\263\3\0\2\263\4\0\1\263\2\0\1\263\36\0"+
    "\1\263\1\0\1\263\4\0\1\263\4\0\1\263\13\0"+
    "\1\356\3\0\3\264\103\0\1\357\4\0\2\265\102\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\7\16\1\360\11\16\7\0\1\267\2\0\4\154\102\0"+
    "\15\272\1\0\4\272\2\0\2\272\6\0\2\272\25\0"+
    "\21\272\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\4\16\1\361\1\16\1\362\12\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\1\363\1\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\1\364"+
    "\1\16\6\0\2\16\25\0\21\16\6\0\15\16\2\0"+
    "\3\16\2\0\1\16\1\365\6\0\2\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\4\16\1\366\14\16\13\0\3\367\23\0\1\302"+
    "\61\0\5\370\3\0\2\370\4\0\1\370\2\0\1\370"+
    "\6\0\1\302\27\0\1\370\1\0\1\370\4\0\1\370"+
    "\4\0\1\370\15\0\5\371\3\0\2\371\4\0\1\371"+
    "\2\0\1\371\6\0\1\302\27\0\1\371\1\0\1\371"+
    "\4\0\1\371\4\0\1\371\15\0\5\372\3\0\2\372"+
    "\4\0\1\372\2\0\1\372\6\0\1\302\27\0\1\372"+
    "\1\0\1\372\4\0\1\372\4\0\1\372\12\0\12\16"+
    "\1\373\2\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\7\16\1\374\11\16\2\0\1\375"+
    "\35\0\1\375\53\0\1\376\35\0\1\376\130\0\1\377"+
    "\40\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\3\16\1\u0100\1\u0101\14\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\2\16\1\u0102"+
    "\16\16\6\0\12\16\1\u0103\2\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\21\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\2\16\1\u0104"+
    "\16\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\13\16\1\u0105\5\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\10\16\1\u0106"+
    "\10\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\2\16\1\u0107\16\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\1\u0108\1\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\6\16\1\u0109\12\16\6\0\15\16\2\0\3\16"+
    "\2\0\1\16\1\u010a\6\0\2\16\25\0\21\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\6\16\1\u010b\12\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\2\16\1\u010c\16\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\2\16\1\u010d\16\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\2\16\1\u010e\16\16\6\0"+
    "\12\16\1\u010f\2\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\21\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\1\u0110\1\16\25\0\21\16\6\0\15\16"+
    "\2\0\3\16\2\0\1\u0111\1\16\6\0\2\16\25\0"+
    "\21\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\2\16\1\u0112\16\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\7\16\1\u0113"+
    "\11\16\3\250\1\u0114\1\250\1\u0115\104\250\6\0\15\116"+
    "\2\0\3\116\2\0\2\116\6\0\2\116\25\0\7\116"+
    "\1\u0116\11\116\3\256\1\u0117\1\256\1\u0118\104\256\6\0"+
    "\12\16\1\u0119\2\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\21\16\7\0\1\354\2\0\4\261\102\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\10\16\1\u011a\10\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\6\16\1\u011b\12\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\1\16\1\u011c\17\16\6\0\15\16\2\0\3\16\2\0"+
    "\1\16\1\u011d\6\0\2\16\25\0\21\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\10\16"+
    "\1\u011e\10\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\2\16\1\u011f\16\16\13\0\3\u0120"+
    "\105\0\5\u0121\3\0\2\u0121\4\0\1\u0121\2\0\1\u0121"+
    "\36\0\1\u0121\1\0\1\u0121\4\0\1\u0121\4\0\1\u0121"+
    "\15\0\5\u0122\3\0\2\u0122\4\0\1\u0122\2\0\1\u0122"+
    "\36\0\1\u0122\1\0\1\u0122\4\0\1\u0122\4\0\1\u0122"+
    "\15\0\5\u0123\3\0\2\u0123\4\0\1\u0123\2\0\1\u0123"+
    "\36\0\1\u0123\1\0\1\u0123\4\0\1\u0123\4\0\1\u0123"+
    "\12\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\5\16\1\u0124\13\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\1\u0125\20\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\6\16\1\u0126\12\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\2\16\1\u0127\16\16\6\0"+
    "\15\16\2\0\3\16\2\0\1\16\1\u0128\6\0\2\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\1\16"+
    "\1\u0129\6\0\2\16\25\0\21\16\6\0\15\16\2\0"+
    "\3\16\2\0\1\u012a\1\16\6\0\2\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\1\u012b\1\16\6\0"+
    "\2\16\25\0\21\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\1\16\1\u012c\17\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\2\16\1\u012d\16\16\6\0\15\16\2\0\3\16\2\0"+
    "\1\u012e\1\16\6\0\2\16\25\0\21\16\6\0\15\16"+
    "\2\0\3\16\2\0\1\16\1\u012f\6\0\2\16\25\0"+
    "\21\16\6\0\15\16\2\0\3\16\2\0\2\16\6\0"+
    "\2\16\25\0\3\16\1\u0130\15\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\11\16\1\u0131"+
    "\7\16\6\0\15\16\2\0\3\16\2\0\1\16\1\u0132"+
    "\6\0\2\16\25\0\21\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\6\16\1\u0133\12\16"+
    "\6\0\15\116\2\0\3\116\2\0\2\116\6\0\2\116"+
    "\25\0\6\116\1\u0134\12\116\6\0\13\16\1\u0135\1\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\5\16\1\u0136\13\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\5\16\1\u0137\13\16"+
    "\36\0\1\u0138\2\0\1\302\106\0\1\u0139\2\0\1\302"+
    "\61\0\5\u013a\3\0\2\u013a\4\0\1\u013a\2\0\1\u013a"+
    "\36\0\1\u013a\1\0\1\u013a\4\0\1\u013a\4\0\1\u013a"+
    "\15\0\5\u013b\3\0\2\u013b\4\0\1\u013b\2\0\1\u013b"+
    "\36\0\1\u013b\1\0\1\u013b\4\0\1\u013b\4\0\1\u013b"+
    "\12\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\2\16\1\u013c\16\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\11\16\1\u013d\7\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\1\u013e\20\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\6\16\1\u013f\12\16\6\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\2\16\25\0"+
    "\6\16\1\u0140\12\16\6\0\15\16\2\0\3\16\2\0"+
    "\2\16\6\0\2\16\25\0\6\16\1\u0141\12\16\6\0"+
    "\15\16\2\0\3\16\2\0\1\u0142\1\16\6\0\2\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\14\16\1\u0143\4\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\11\16"+
    "\1\u0144\7\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\6\16\1\u0145\12\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\2\16"+
    "\1\u0146\16\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\1\16\1\u0147\17\16\6\0\15\116"+
    "\2\0\3\116\2\0\2\116\6\0\2\116\25\0\1\116"+
    "\1\u0148\17\116\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\7\16\1\u0149\11\16\6\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\1\u014a\1\16\25\0"+
    "\21\16\13\0\3\u014b\112\0\1\u014c\104\0\5\170\3\0"+
    "\2\170\4\0\1\170\2\0\1\170\36\0\1\170\1\0"+
    "\1\170\4\0\1\170\4\0\1\170\15\0\5\u014d\3\0"+
    "\2\u014d\4\0\1\u014d\2\0\1\u014d\36\0\1\u014d\1\0"+
    "\1\u014d\4\0\1\u014d\4\0\1\u014d\12\0\15\16\2\0"+
    "\3\16\2\0\1\16\1\u014e\6\0\2\16\25\0\21\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\7\16\1\u014f\11\16\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\3\16\1\u0150\15\16"+
    "\6\0\15\116\2\0\3\116\2\0\2\116\6\0\2\116"+
    "\25\0\3\116\1\u0151\15\116\6\0\15\16\2\0\3\16"+
    "\2\0\2\16\6\0\2\16\25\0\3\16\1\u0152\15\16"+
    "\6\0\15\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\2\16\1\u0153\16\16\13\0\3\u0154\105\0\5\u0155"+
    "\3\0\2\u0155\4\0\1\u0155\2\0\1\u0155\36\0\1\u0155"+
    "\1\0\1\u0155\4\0\1\u0155\4\0\1\u0155\15\0\5\371"+
    "\3\0\2\371\4\0\1\371\2\0\1\371\36\0\1\371"+
    "\1\0\1\371\4\0\1\371\4\0\1\371\12\0\12\16"+
    "\1\u0156\2\16\2\0\3\16\2\0\2\16\6\0\2\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\1\u0157"+
    "\1\16\6\0\2\16\25\0\21\16\6\0\15\16\2\0"+
    "\3\16\2\0\2\16\6\0\2\16\25\0\2\16\1\u0158"+
    "\16\16\6\0\15\116\2\0\3\116\2\0\2\116\6\0"+
    "\2\116\25\0\2\116\1\u0159\16\116\13\0\3\u015a\105\0"+
    "\5\u015b\3\0\2\u015b\4\0\1\u015b\2\0\1\u015b\36\0"+
    "\1\u015b\1\0\1\u015b\4\0\1\u015b\4\0\1\u015b\12\0"+
    "\15\16\2\0\3\16\2\0\2\16\6\0\1\u015c\1\16"+
    "\25\0\21\16\6\0\15\16\2\0\3\16\2\0\2\16"+
    "\6\0\2\16\25\0\2\16\1\u015d\16\16\36\0\1\u015e"+
    "\2\0\1\302\106\0\1\u015f\2\0\1\302\56\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\12\16"+
    "\1\u0160\6\16\13\0\3\u0161\112\0\1\u0122\101\0\15\16"+
    "\2\0\3\16\2\0\2\16\6\0\2\16\25\0\11\16"+
    "\1\u0162\7\16\13\0\3\u0163\107\0\3\170\74\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\17\1\2\11\3\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\4\11\1\1\2\11\2\1\1\11"+
    "\25\1\3\11\2\1\2\11\1\1\1\0\1\11\1\1"+
    "\3\11\2\1\2\11\2\1\1\11\1\0\3\1\2\11"+
    "\1\1\1\0\1\11\6\0\2\1\2\11\2\1\1\0"+
    "\1\1\2\0\5\1\1\0\1\1\1\0\1\1\6\11"+
    "\1\0\4\11\1\1\3\11\1\1\2\11\1\0\33\1"+
    "\4\11\5\1\1\0\4\1\1\0\2\11\2\1\1\11"+
    "\5\1\1\11\2\0\1\1\2\0\2\1\2\0\3\11"+
    "\1\0\34\1\4\0\7\1\4\0\4\1\1\11\24\1"+
    "\1\11\1\0\1\1\1\11\1\0\11\1\2\0\24\1"+
    "\4\0\17\1\3\0\6\1\2\0\10\1\2\0\1\1"+
    "\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Stack<Integer> stack = new Stack<Integer>();
  private Stack<Integer> quotesStack = new Stack<Integer>();
  private Stack<Integer> prevQuotesStack = new Stack<Integer>();
  private int SINGLE_QUOTE = 0;
  private int DOUBLE_QUOTE = 1;

  public void yy_push_state(int state) {
    prevQuotesStack.addAll(quotesStack);
    quotesStack.clear();
    stack.push(state);
    yybegin(state);
  }

  public void yy_pop_state() {
    stack.pop();
    yybegin(stack.lastElement());
    quotesStack.addAll(prevQuotesStack);
    prevQuotesStack.clear();
  }

  public void yy_start_string(int type) {
    quotesStack.push(type);
  }

  public void yy_end_string(int type) {
    if (quotesStack.peek() != type) {
      throw new IllegalStateException("Unmatched quotes");
    }
    quotesStack.pop();
  }

  public IElementType handle_string_end(boolean isDoubleQuote) {
    if (inside_string_with_quote(isDoubleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE)) {
       return LITERAL_STRING_TEMPLATE_ENTRY;
    }

    yy_pop_state();
    yy_end_string(isDoubleQuote ? DOUBLE_QUOTE : SINGLE_QUOTE);
    yybegin(MAYBE_SEMICOLON);
    return CLOSING_QUOTE;
  }

  public boolean inside_string_with_quote(int type) {
    return !quotesStack.isEmpty() && quotesStack.peek() == type;
  }

  public boolean inside_interpolation() {
    return stack.size() > 2 && stack.get(1) == TEMPLATE_STRING;
  }

  public boolean is_interpolation_state() {
    return stack.peek() == TEMPLATE_STRING;
  }

  public _VlangLexer() {
    this((java.io.Reader)null);
    stack.push(YYINITIAL);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 138: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 139: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 140: break;
          case 4: 
            { return QUOTIENT;
            } 
            // fall through
          case 141: break;
          case 5: 
            { return MUL;
            } 
            // fall through
          case 142: break;
          case 6: 
            { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;
            } 
            // fall through
          case 143: break;
          case 7: 
            { yybegin(MAYBE_SEMICOLON); return INT;
            } 
            // fall through
          case 144: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 145: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 146: break;
          case 10: 
            { yy_push_state(TEMPLATE_STRING);
    yy_start_string(DOUBLE_QUOTE);
    return OPEN_QUOTE;
            } 
            // fall through
          case 147: break;
          case 11: 
            { yy_push_state(TEMPLATE_STRING);
    yy_start_string(SINGLE_QUOTE);
    return OPEN_QUOTE;
            } 
            // fall through
          case 148: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 149: break;
          case 13: 
            { return BACKTICK;
            } 
            // fall through
          case 150: break;
          case 14: 
            { return TILDA;
            } 
            // fall through
          case 151: break;
          case 15: 
            { return BIT_OR;
            } 
            // fall through
          case 152: break;
          case 16: 
            { if (inside_interpolation()) {
        yy_pop_state();
        return LONG_TEMPLATE_ENTRY_END;
    }

    yybegin(MAYBE_SEMICOLON);
    return RBRACE;
            } 
            // fall through
          case 153: break;
          case 17: 
            { return LBRACK;
            } 
            // fall through
          case 154: break;
          case 18: 
            { yybegin(MAYBE_SEMICOLON); return RBRACK;
            } 
            // fall through
          case 155: break;
          case 19: 
            { return LPAREN;
            } 
            // fall through
          case 156: break;
          case 20: 
            { yybegin(MAYBE_SEMICOLON); return RPAREN;
            } 
            // fall through
          case 157: break;
          case 21: 
            { yybegin(MAYBE_SEMICOLON); return COLON;
            } 
            // fall through
          case 158: break;
          case 22: 
            { return SEMICOLON;
            } 
            // fall through
          case 159: break;
          case 23: 
            { return COMMA;
            } 
            // fall through
          case 160: break;
          case 24: 
            { return ASSIGN;
            } 
            // fall through
          case 161: break;
          case 25: 
            { yybegin(MAYBE_SEMICOLON); return NOT;
            } 
            // fall through
          case 162: break;
          case 26: 
            { yybegin(MAYBE_SEMICOLON); return QUESTION;
            } 
            // fall through
          case 163: break;
          case 27: 
            { return PLUS;
            } 
            // fall through
          case 164: break;
          case 28: 
            { return BIT_AND;
            } 
            // fall through
          case 165: break;
          case 29: 
            { return BIT_XOR;
            } 
            // fall through
          case 166: break;
          case 30: 
            { return LESS;
            } 
            // fall through
          case 167: break;
          case 31: 
            { return REMAINDER;
            } 
            // fall through
          case 168: break;
          case 32: 
            { return AT;
            } 
            // fall through
          case 169: break;
          case 33: 
            { yybegin(MAYBE_SEMICOLON); return GREATER;
            } 
            // fall through
          case 170: break;
          case 34: 
            { yybegin(MAYBE_SEMICOLON); return LANGUAGE_INJECTION;
            } 
            // fall through
          case 171: break;
          case 35: 
            { yybegin(YYINITIAL); yypushback(yytext().length());
            } 
            // fall through
          case 172: break;
          case 36: 
            { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 173: break;
          case 37: 
            { return LITERAL_STRING_TEMPLATE_ENTRY;
            } 
            // fall through
          case 174: break;
          case 38: 
            { return handle_string_end(true);
            } 
            // fall through
          case 175: break;
          case 39: 
            { return handle_string_end(false);
            } 
            // fall through
          case 176: break;
          case 40: 
            { yybegin(SHORT_TEMPLATE_ENTRY); return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 177: break;
          case 41: 
            { yybegin(TEMPLATE_STRING); return LITERAL_STRING_TEMPLATE_ENTRY;
            } 
            // fall through
          case 178: break;
          case 42: 
            { return IDENTIFIER;
            } 
            // fall through
          case 179: break;
          case 43: 
            { yybegin(SHORT_TEMPLATE_ENTRY_FIELD_NAME); return DOT;
            } 
            // fall through
          case 180: break;
          case 44: 
            { yybegin(TEMPLATE_STRING); return handle_string_end(true);
            } 
            // fall through
          case 181: break;
          case 45: 
            { yybegin(TEMPLATE_STRING); return handle_string_end(false);
            } 
            // fall through
          case 182: break;
          case 46: 
            { return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 183: break;
          case 47: 
            { yybegin(ASM_BLOCK_LINE); return LBRACE;
            } 
            // fall through
          case 184: break;
          case 48: 
            { return ASM_LINE;
            } 
            // fall through
          case 185: break;
          case 49: 
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            } 
            // fall through
          case 186: break;
          case 50: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 187: break;
          case 51: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 188: break;
          case 52: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 189: break;
          case 53: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 190: break;
          case 54: 
            { yybegin(MAYBE_SEMICOLON); return DECIMALI;
            } 
            // fall through
          case 191: break;
          case 55: 
            { return OR ;
            } 
            // fall through
          case 192: break;
          case 56: 
            { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;
            } 
            // fall through
          case 193: break;
          case 57: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 194: break;
          case 58: 
            { yybegin(MAYBE_SEMICOLON); return FLOAT;
            } 
            // fall through
          case 195: break;
          case 59: 
            { return RANGE;
            } 
            // fall through
          case 196: break;
          case 60: 
            { yybegin(MAYBE_SEMICOLON); return CHAR;
            } 
            // fall through
          case 197: break;
          case 61: 
            { return COND_OR;
            } 
            // fall through
          case 198: break;
          case 62: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 199: break;
          case 63: 
            { return HASH_LBRACK;
            } 
            // fall through
          case 200: break;
          case 64: 
            { return VAR_ASSIGN;
            } 
            // fall through
          case 201: break;
          case 65: 
            { return EQ;
            } 
            // fall through
          case 202: break;
          case 66: 
            { return NOT_EQ;
            } 
            // fall through
          case 203: break;
          case 67: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 204: break;
          case 68: 
            { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;
            } 
            // fall through
          case 205: break;
          case 69: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 206: break;
          case 70: 
            { return COND_AND;
            } 
            // fall through
          case 207: break;
          case 71: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 208: break;
          case 72: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 209: break;
          case 73: 
            { return SEND_CHANNEL;
            } 
            // fall through
          case 210: break;
          case 74: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 211: break;
          case 75: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 212: break;
          case 76: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 213: break;
          case 77: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 214: break;
          case 78: 
            { return FN;
            } 
            // fall through
          case 215: break;
          case 79: 
            { return IF ;
            } 
            // fall through
          case 216: break;
          case 80: 
            { return IS;
            } 
            // fall through
          case 217: break;
          case 81: 
            { return IN;
            } 
            // fall through
          case 218: break;
          case 82: 
            { return AS ;
            } 
            // fall through
          case 219: break;
          case 83: 
            { return GO;
            } 
            // fall through
          case 220: break;
          case 84: 
            { yy_push_state(YYINITIAL);      return LONG_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 221: break;
          case 85: 
            { return LITERAL_STRING_TEMPLATE_ESCAPE_ENTRY;
            } 
            // fall through
          case 222: break;
          case 86: 
            { yy_push_state(YYINITIAL); return LONG_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 223: break;
          case 87: 
            { yybegin(TEMPLATE_STRING); return LITERAL_STRING_TEMPLATE_ESCAPE_ENTRY;
            } 
            // fall through
          case 224: break;
          case 88: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 225: break;
          case 89: 
            { yybegin(MAYBE_SEMICOLON); return HEX;
            } 
            // fall through
          case 226: break;
          case 90: 
            { yybegin(MAYBE_SEMICOLON); return OCT;
            } 
            // fall through
          case 227: break;
          case 91: 
            { yybegin(MAYBE_SEMICOLON); return BIN;
            } 
            // fall through
          case 228: break;
          case 92: 
            { yybegin(MAYBE_SEMICOLON); return FLOATI;
            } 
            // fall through
          case 229: break;
          case 93: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 230: break;
          case 94: 
            { yybegin(MAYBE_SEMICOLON); return RAW_STRING;
            } 
            // fall through
          case 231: break;
          case 95: 
            { return IF_COMPILE_TIME ;
            } 
            // fall through
          case 232: break;
          case 96: 
            { yybegin(MAYBE_SEMICOLON); return BAD_CHARACTER;
            } 
            // fall through
          case 233: break;
          case 97: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 234: break;
          case 98: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 235: break;
          case 99: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 236: break;
          case 100: 
            { return FOR ;
            } 
            // fall through
          case 237: break;
          case 101: 
            { yybegin(MAYBE_SEMICOLON); return NIL;
            } 
            // fall through
          case 238: break;
          case 102: 
            { yybegin(ASM_BLOCK); return ASM;
            } 
            // fall through
          case 239: break;
          case 103: 
            { return MUT;
            } 
            // fall through
          case 240: break;
          case 104: 
            { return PUB;
            } 
            // fall through
          case 241: break;
          case 105: 
            { return FOR_COMPILE_TIME ;
            } 
            // fall through
          case 242: break;
          case 106: 
            { return NOT_IS;
            } 
            // fall through
          case 243: break;
          case 107: 
            { return NOT_IN;
            } 
            // fall through
          case 244: break;
          case 108: 
            { return UNSIGNED_SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 245: break;
          case 109: 
            { return ELSE;
            } 
            // fall through
          case 246: break;
          case 110: 
            { return ENUM;
            } 
            // fall through
          case 247: break;
          case 111: 
            { return LOCK;
            } 
            // fall through
          case 248: break;
          case 112: 
            { yybegin(MAYBE_SEMICOLON); return TRUE;
            } 
            // fall through
          case 249: break;
          case 113: 
            { return TYPE_;
            } 
            // fall through
          case 250: break;
          case 114: 
            { return GOTO;
            } 
            // fall through
          case 251: break;
          case 115: 
            { yybegin(MAYBE_SEMICOLON); return BREAK;
            } 
            // fall through
          case 252: break;
          case 116: 
            { return CONST;
            } 
            // fall through
          case 253: break;
          case 117: 
            { return RLOCK;
            } 
            // fall through
          case 254: break;
          case 118: 
            { return ELSE_COMPILE_TIME ;
            } 
            // fall through
          case 255: break;
          case 119: 
            { return UNION;
            } 
            // fall through
          case 256: break;
          case 120: 
            { yybegin(MAYBE_SEMICOLON); return FALSE;
            } 
            // fall through
          case 257: break;
          case 121: 
            { return MATCH ;
            } 
            // fall through
          case 258: break;
          case 122: 
            { return DEFER;
            } 
            // fall through
          case 259: break;
          case 123: 
            { yybegin(MAYBE_SEMICOLON); return RETURN ;
            } 
            // fall through
          case 260: break;
          case 124: 
            { return UNSAFE;
            } 
            // fall through
          case 261: break;
          case 125: 
            { return IMPORT ;
            } 
            // fall through
          case 262: break;
          case 126: 
            { return SELECT;
            } 
            // fall through
          case 263: break;
          case 127: 
            { return STRUCT;
            } 
            // fall through
          case 264: break;
          case 128: 
            { return STATIC;
            } 
            // fall through
          case 265: break;
          case 129: 
            { return SHARED;
            } 
            // fall through
          case 266: break;
          case 130: 
            { return SWITCH;
            } 
            // fall through
          case 267: break;
          case 131: 
            { return ASSERT;
            } 
            // fall through
          case 268: break;
          case 132: 
            { return MODULE;
            } 
            // fall through
          case 269: break;
          case 133: 
            { return BUILTIN_GLOBAL;
            } 
            // fall through
          case 270: break;
          case 134: 
            { yybegin(MAYBE_SEMICOLON); return CONTINUE ;
            } 
            // fall through
          case 271: break;
          case 135: 
            { return VOLATILE;
            } 
            // fall through
          case 272: break;
          case 136: 
            { return INTERFACE;
            } 
            // fall through
          case 273: break;
          case 137: 
            { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;
            } 
            // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
