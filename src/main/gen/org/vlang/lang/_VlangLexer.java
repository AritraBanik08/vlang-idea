/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.vlang.lang.VlangParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>v.flex</tt>
 */
public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int C_STRING_LITERAL = 4;
  public static final int C_FLAG_VALUE_EXPECTED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
    "\11\0\1\2\1\1\1\106\1\2\1\4\22\0\1\2\1\60\1\31\1\5\1\75\1\65\1\63\1\32\1\52"+
    "\1\53\1\6\1\62\1\56\1\24\1\25\1\3\1\16\1\15\6\14\1\37\1\13\1\54\1\55\1\42"+
    "\1\57\1\43\1\61\1\0\2\12\1\30\1\12\1\23\1\12\3\7\1\26\10\7\1\27\1\7\1\36\2"+
    "\7\1\20\2\7\1\50\1\35\1\51\1\64\1\10\1\44\1\40\1\22\1\34\1\72\1\41\1\73\1"+
    "\74\1\101\1\66\1\7\1\100\1\70\1\102\1\67\1\21\1\103\1\7\1\33\1\76\1\77\1\71"+
    "\1\36\1\104\1\17\1\105\1\7\1\46\1\45\1\47\7\0\1\106\24\0\1\7\12\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\12\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2"+
    "\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7"+
    "\1\0\26\7\2\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17"+
    "\0\2\7\7\0\2\7\12\11\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6"+
    "\7\4\0\2\7\4\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\1\0\10"+
    "\7\6\0\26\7\3\0\1\7\2\0\1\7\7\0\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26"+
    "\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2"+
    "\7\1\0\2\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1"+
    "\0\2\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\13\0\10\7\1\0\2\7\10\0\3\7\5\0\1\7\4\0\10\7\1\0\6\7\1\0\5\7\3\0\1\7\3\0\2"+
    "\7\15\0\13\7\2\0\1\7\6\0\3\7\10\0\1\7\12\0\6\7\5\0\22\7\3\0\10\7\1\0\11\7"+
    "\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\11\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1"+
    "\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7"+
    "\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\11\2\0\14\7\1\0\24\7\13\0\5\7\22\0\7\7\4"+
    "\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2"+
    "\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1"+
    "\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\0\10\7\7\0\15\7\1\0\6\7"+
    "\23\0\1\7\4\0\1\7\3\0\5\7\2\0\22\7\1\0\1\7\5\0\17\7\1\0\16\7\2\0\5\7\13\0"+
    "\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3\0\3\7\11\0\4\7\1\0\4\7\3"+
    "\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7\3\0\3\7\1"+
    "\0\7\7\3\0\4\7\2\0\6\7\14\0\2\106\7\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12"+
    "\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5"+
    "\7\4\0\1\7\4\0\2\7\13\0\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\6\0"+
    "\2\7\12\0\5\7\5\0\2\7\3\0\7\7\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0\7\7"+
    "\1\0\3\7\1\0\4\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\11\5"+
    "\7\1\0\3\7\1\0\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1"+
    "\7\1\0\1\7\30\0\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1"+
    "\7\1\0\10\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0"+
    "\6\7\2\0\6\7\2\0\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4"+
    "\0\16\7\2\0\1\7\1\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7"+
    "\1\0\3\7\1\0\12\7\3\0\1\7\12\0\4\7\13\0\12\11\1\7\1\0\1\7\3\0\7\7\1\0\1\7"+
    "\1\0\4\7\1\0\17\7\1\0\2\7\14\0\3\7\7\0\4\7\11\0\2\7\1\0\1\7\20\0\4\7\10\0"+
    "\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1"+
    "\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7"+
    "\2\0\13\7\1\0\10\7\2\0\22\11\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0"+
    "\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1"+
    "\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7"+
    "\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");
  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\1\2\10\2\7\1\11\1\12\2\7\2\1\4\7"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\5\7\1\1\4\7\1\37"+
    "\1\40\1\37\1\41\1\3\2\37\1\42\1\3\1\43"+
    "\1\44\1\45\3\5\1\46\3\7\2\0\1\47\1\10"+
    "\6\0\1\50\1\7\1\51\1\52\1\53\1\54\2\0"+
    "\1\55\3\0\3\7\1\56\2\7\1\57\1\60\1\61"+
    "\1\62\1\63\1\15\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\5\7\1\102\1\103\2\0\10\7\1\104\1\0"+
    "\1\44\2\5\1\7\1\0\1\53\1\105\1\106\1\107"+
    "\1\7\1\110\1\111\7\7\1\112\1\113\1\114\4\7"+
    "\1\115\2\7\1\0\1\116\6\7\1\117\1\120\1\44"+
    "\1\0\2\5\5\7\1\121\1\7\1\122\1\123\6\7"+
    "\1\124\1\0\3\7\1\125\2\7\1\5\1\126\1\7"+
    "\1\127\1\7\1\130\6\7\1\131\1\7\1\132\4\7"+
    "\1\133\1\5\1\7\1\134\1\7\1\135\1\7\1\136"+
    "\1\137\2\7\1\140\1\141\1\142\1\143\1\5\3\7"+
    "\1\144\1\7\1\145\1\146\1\147\2\7\1\150\2\7"+
    "\1\151";
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u011c\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u0852\0\u011c\0\u011c"+
    "\0\u0899\0\u08e0\0\u011c\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43"+
    "\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b"+
    "\0\u0cc2\0\u011c\0\u011c\0\u0d09\0\u0d50\0\u0d97\0\u058c\0\u0dde"+
    "\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u011c\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u011c\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u030d\0\u011c\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u027f\0\u1323"+
    "\0\u011c\0\u011c\0\u136a\0\u13b1\0\u13f8\0\u058c\0\u011c\0\u143f"+
    "\0\u05d3\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u011c\0\u1677\0\u011c\0\u16be\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u1705"+
    "\0\u011c\0\u011c\0\u174c\0\u027f\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u027f\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u011c\0\u0dde\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u124e\0\u1295\0\u12dc"+
    "\0\u1dad\0\u011c\0\u011c\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\u011c\0\u011c\0\u011c\0\u1fe5\0\u202c\0\u2073"+
    "\0\u20ba\0\u027f\0\u2101\0\u2148\0\u218f\0\u011c\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u027f\0\u027f\0\u011c\0\u1c03"+
    "\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u027f"+
    "\0\u2571\0\u027f\0\u027f\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4"+
    "\0\u271b\0\u027f\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u027f\0\u287e"+
    "\0\u28c5\0\u290c\0\u0f41\0\u2953\0\u027f\0\u299a\0\u027f\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u027f\0\u2b8b\0\u011c"+
    "\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u027f\0\u2cee\0\u2d35\0\u027f"+
    "\0\u2d7c\0\u027f\0\u2dc3\0\u027f\0\u027f\0\u2e0a\0\u2e51\0\u027f"+
    "\0\u027f\0\u027f\0\u027f\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u027f"+
    "\0\u2fb4\0\u0f41\0\u027f\0\u027f\0\u2ffb\0\u3042\0\u027f\0\u3089"+
    "\0\u30d0\0\u027f";
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\13\3\16\1\17\2\13\1\20\1\21"+
    "\1\13\1\22\1\23\1\24\1\13\1\25\1\26\1\27"+
    "\1\30\1\31\1\5\1\13\1\16\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\13\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\2\13\1\70\1\71\2\13"+
    "\1\0\1\72\1\73\1\7\1\74\1\0\101\72\1\0"+
    "\1\72\1\75\1\76\1\72\1\0\24\72\1\77\10\72"+
    "\1\100\43\72\1\0\1\101\1\75\1\102\1\101\1\0"+
    "\102\101\110\0\1\6\110\0\1\103\2\0\1\104\50\0"+
    "\1\105\27\0\1\106\1\0\2\106\1\0\61\106\1\107"+
    "\4\106\1\110\13\106\57\0\1\111\36\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\7\13\1\0"+
    "\10\13\10\0\1\13\1\112\2\13\4\113\4\13\1\114"+
    "\1\0\1\115\3\13\2\0\2\13\1\0\1\13\1\113"+
    "\1\13\1\114\24\0\7\13\1\0\10\13\12\0\1\116"+
    "\1\0\4\116\20\0\1\116\26\0\1\117\30\0\1\120"+
    "\1\116\1\0\4\16\4\0\1\121\1\0\1\115\11\0"+
    "\1\16\1\0\1\121\24\0\1\117\30\0\1\122\1\116"+
    "\1\0\4\123\2\124\1\125\1\126\1\121\1\0\1\115"+
    "\11\0\1\123\1\0\1\121\24\0\1\117\27\0\15\13"+
    "\2\0\3\13\2\0\1\127\1\13\1\0\4\13\24\0"+
    "\7\13\1\0\10\13\10\0\15\13\2\0\3\13\2\0"+
    "\1\130\1\13\1\0\4\13\24\0\7\13\1\0\10\13"+
    "\25\0\1\131\32\0\1\132\37\0\1\133\2\0\4\133"+
    "\6\0\1\134\11\0\1\133\56\0\15\13\2\0\1\13"+
    "\1\25\1\13\2\0\2\13\1\0\4\13\24\0\7\13"+
    "\1\0\10\13\10\0\15\13\1\0\1\135\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\10\13\1\0"+
    "\1\136\1\0\2\136\1\0\24\136\1\137\3\136\1\140"+
    "\51\136\1\141\1\0\2\141\1\0\25\141\1\137\2\141"+
    "\1\142\51\141\7\0\15\13\2\0\3\13\1\136\1\141"+
    "\2\13\1\0\3\13\1\143\24\0\7\13\1\0\10\13"+
    "\10\0\12\13\1\144\2\13\2\0\3\13\1\136\1\141"+
    "\2\13\1\0\2\13\1\145\1\13\24\0\7\13\1\0"+
    "\10\13\10\0\15\13\2\0\3\13\2\0\2\13\1\0"+
    "\4\13\24\0\7\13\1\0\1\146\7\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\1\13"+
    "\1\147\1\150\4\13\1\0\10\13\25\0\1\151\15\0"+
    "\1\152\14\0\1\153\72\0\1\154\13\0\1\155\27\0"+
    "\44\36\1\156\42\36\45\0\1\157\11\0\1\160\106\0"+
    "\1\161\106\0\1\162\106\0\1\163\106\0\1\164\2\0"+
    "\1\165\103\0\1\166\3\0\1\167\1\170\101\0\1\171"+
    "\106\0\1\172\36\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\1\13\1\173\3\13\1\174\1\13"+
    "\1\0\4\13\1\175\3\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\1\13\1\176\5\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\3\13\1\177\24\0\7\13\1\0\10\13\10\0"+
    "\12\13\1\200\2\13\2\0\3\13\2\0\2\13\1\0"+
    "\2\13\1\201\1\13\24\0\1\13\1\202\5\13\1\0"+
    "\10\13\10\0\12\13\1\203\2\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\10\13\42\0"+
    "\1\204\24\0\1\205\27\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\3\13\1\206\24\0\7\13\1\0\1\13"+
    "\1\207\4\13\1\210\1\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\7\13\1\0\7\13"+
    "\1\211\10\0\12\13\1\212\2\13\2\0\3\13\2\0"+
    "\2\13\1\0\2\13\1\213\1\13\24\0\3\13\1\214"+
    "\3\13\1\0\10\13\10\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\3\13\1\215\3\13\1\0"+
    "\10\13\4\0\1\103\2\0\1\104\101\0\1\75\106\0"+
    "\1\216\105\0\1\217\1\0\2\217\1\0\30\217\1\0"+
    "\4\217\1\0\1\137\43\217\1\101\1\0\2\101\1\0"+
    "\103\101\1\216\2\101\1\0\102\101\1\103\1\0\2\103"+
    "\1\0\102\103\6\104\1\220\100\104\1\106\1\0\2\106"+
    "\1\0\103\106\1\0\2\106\1\0\62\106\1\221\20\106"+
    "\1\0\2\106\1\0\63\106\1\222\16\106\7\0\1\13"+
    "\1\113\2\13\4\113\4\13\1\114\1\0\1\115\3\13"+
    "\2\0\2\13\1\0\1\13\1\113\1\13\1\114\24\0"+
    "\6\13\1\223\1\0\10\13\10\0\1\13\1\113\2\13"+
    "\4\113\4\13\1\114\1\0\1\115\3\13\2\0\2\13"+
    "\1\0\1\13\1\113\1\13\1\114\24\0\7\13\1\0"+
    "\10\13\10\0\15\13\1\224\1\0\3\13\2\0\2\13"+
    "\1\0\4\13\20\0\1\224\3\0\7\13\1\0\10\13"+
    "\1\0\25\133\1\0\61\133\10\0\1\120\2\0\4\120"+
    "\4\0\1\121\1\0\1\115\11\0\1\120\1\0\1\121"+
    "\55\0\1\225\2\0\4\225\5\0\1\224\12\0\1\225"+
    "\22\0\1\224\34\0\1\122\2\0\4\122\4\0\1\121"+
    "\1\0\1\115\11\0\1\122\1\0\1\121\55\0\1\122"+
    "\1\116\1\0\4\123\4\0\1\121\1\0\1\115\11\0"+
    "\1\123\1\0\1\121\24\0\1\117\30\0\1\226\1\0"+
    "\5\226\3\0\2\226\4\0\1\226\3\0\1\226\2\0"+
    "\3\226\30\0\2\226\23\0\1\227\3\0\3\227\100\0"+
    "\1\230\4\0\2\230\77\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\3\13\1\231\24\0\7\13\1\0\10\13"+
    "\11\0\1\133\2\0\4\133\4\0\1\121\13\0\1\133"+
    "\1\0\1\121\24\0\1\232\45\0\1\233\70\0\2\234"+
    "\1\0\1\234\4\0\5\234\2\0\3\234\2\0\2\234"+
    "\1\0\1\234\1\0\2\234\24\0\7\234\1\0\10\234"+
    "\15\0\4\136\2\0\1\136\6\0\1\136\1\0\1\136"+
    "\1\0\5\136\25\0\1\136\1\0\1\136\1\0\1\136"+
    "\3\0\1\136\23\0\4\141\2\0\1\141\7\0\2\141"+
    "\1\0\5\141\25\0\1\141\1\0\1\141\1\0\1\141"+
    "\3\0\1\141\16\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\1\13\1\235\6\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\4\13"+
    "\24\0\1\13\1\236\5\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\7\13"+
    "\1\0\1\237\7\13\10\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\1\240\7\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\4\13"+
    "\24\0\3\13\1\241\3\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\7\13"+
    "\1\0\1\242\7\13\60\0\1\243\106\0\1\244\106\0"+
    "\1\245\36\0\15\13\2\0\3\13\2\0\2\13\1\0"+
    "\4\13\24\0\7\13\1\0\1\13\1\246\6\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\7\13\1\0\5\13\1\247\2\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\7\13\1\0"+
    "\1\250\7\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\5\13\1\251\1\13\1\0\10\13"+
    "\10\0\15\13\2\0\3\13\2\0\1\252\1\13\1\0"+
    "\4\13\24\0\7\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\2\13\1\253"+
    "\4\13\1\0\10\13\10\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\1\13\1\254"+
    "\6\13\71\0\1\255\111\0\1\256\22\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\2\13\1\257"+
    "\4\13\1\0\10\13\10\0\15\13\2\0\3\13\2\0"+
    "\1\260\1\13\1\0\4\13\24\0\7\13\1\0\10\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\4\13"+
    "\24\0\1\261\6\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\7\13\1\0"+
    "\5\13\1\262\2\13\10\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\4\13\1\263\2\13\1\0"+
    "\10\13\10\0\15\13\2\0\3\13\2\0\2\13\1\0"+
    "\4\13\24\0\7\13\1\0\1\13\1\264\6\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\7\13\1\0\1\13\1\265\6\13\10\0\13\13\1\266"+
    "\1\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\7\13\1\0\10\13\1\0\3\104\1\267\2\104\1\270"+
    "\100\104\1\106\1\0\2\106\1\0\27\106\1\271\53\106"+
    "\1\0\2\106\1\0\33\106\1\272\46\106\7\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\2\13"+
    "\1\273\4\13\1\0\10\13\11\0\1\225\2\0\4\225"+
    "\20\0\1\225\57\0\1\225\2\0\4\225\20\0\1\225"+
    "\26\0\1\232\27\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\2\13\1\274\1\13\24\0\7\13\1\0\10\13"+
    "\10\0\15\234\1\0\4\234\2\0\2\234\1\0\4\234"+
    "\24\0\7\234\1\0\10\234\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\3\13\1\275\3\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\1\276\1\277\6\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\3\13"+
    "\1\300\24\0\7\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\3\13\1\301\24\0\7\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\4\13\1\302\3\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\3\13"+
    "\1\303\24\0\7\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\3\13\1\304\24\0\7\13"+
    "\1\0\10\13\10\0\12\13\1\305\2\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\7\13\1\0\10\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\2\13"+
    "\1\306\1\13\24\0\7\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\2\13\1\307\1\310"+
    "\24\0\7\13\1\0\10\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\2\13\1\311\4\13"+
    "\1\0\10\13\10\0\12\13\1\312\2\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\7\13\1\0\10\13"+
    "\77\0\1\313\17\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\3\13\1\314\24\0\7\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\3\13\1\315\3\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\7\13\1\0"+
    "\1\13\1\316\6\13\10\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\3\13\1\317\24\0\7\13\1\0\10\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\4\13"+
    "\24\0\3\13\1\320\3\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\1\13\1\321\1\0\4\13\24\0"+
    "\7\13\1\0\10\13\1\0\1\106\1\0\2\106\1\0"+
    "\63\106\1\322\17\106\1\0\2\106\1\0\67\106\1\323"+
    "\12\106\7\0\12\13\1\324\2\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\7\13\1\0\2\13\1\325\5\13\10\0\15\13\2\0"+
    "\3\13\2\0\1\326\1\13\1\0\4\13\24\0\7\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\1\13\1\327\6\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\4\13"+
    "\24\0\1\330\6\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\1\331\1\13\1\0\4\13\24\0\7\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\1\332"+
    "\1\13\1\0\4\13\24\0\7\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\1\333\1\13\1\0\4\13"+
    "\24\0\7\13\1\0\10\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\5\13\1\334\1\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\3\13\1\335\3\13\1\0\10\13"+
    "\10\0\15\13\2\0\3\13\2\0\1\336\1\13\1\0"+
    "\4\13\24\0\7\13\1\0\10\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\7\13\1\0"+
    "\1\13\1\337\6\13\42\0\1\340\54\0\15\13\2\0"+
    "\3\13\2\0\1\13\1\341\1\0\4\13\24\0\7\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\1\13"+
    "\1\342\1\0\4\13\24\0\7\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\1\13\1\343\1\0\4\13"+
    "\24\0\7\13\1\0\10\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\2\13\1\344\4\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\3\13\1\345\4\13"+
    "\1\0\1\106\1\0\2\106\1\0\64\106\1\346\15\106"+
    "\7\0\13\13\1\347\1\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\1\13"+
    "\1\350\5\13\1\0\10\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\1\13\1\351\5\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\7\13\1\0\1\13\1\352\6\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\4\13"+
    "\24\0\5\13\1\353\1\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\7\13"+
    "\1\0\1\13\1\354\6\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\3\13\1\355\24\0\7\13\1\0"+
    "\10\13\10\0\15\13\2\0\3\13\2\0\2\13\1\0"+
    "\4\13\24\0\2\13\1\356\4\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\7\13\1\0\3\13\1\357\4\13\10\0\15\13\2\0"+
    "\3\13\2\0\2\13\1\0\4\13\24\0\7\13\1\0"+
    "\1\13\1\360\6\13\10\0\15\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\1\13\1\361"+
    "\6\13\10\0\15\13\2\0\3\13\2\0\2\13\1\0"+
    "\4\13\24\0\7\13\1\0\3\13\1\362\4\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\3\13\1\363"+
    "\24\0\7\13\1\0\10\13\1\0\1\106\1\0\2\106"+
    "\1\0\65\106\1\364\14\106\7\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\2\13\1\365\1\13\24\0\7\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\3\13\1\366\3\13\1\0\10\13"+
    "\10\0\15\13\2\0\3\13\2\0\2\13\1\0\2\13"+
    "\1\367\1\13\24\0\7\13\1\0\10\13\10\0\15\13"+
    "\2\0\3\13\2\0\2\13\1\0\4\13\24\0\7\13"+
    "\1\0\1\13\1\370\6\13\10\0\15\13\2\0\3\13"+
    "\2\0\1\371\1\13\1\0\4\13\24\0\7\13\1\0"+
    "\10\13\1\0\1\106\1\0\2\106\1\0\34\106\1\372"+
    "\45\106\7\0\15\13\2\0\3\13\2\0\2\13\1\0"+
    "\4\13\24\0\2\13\1\373\4\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\3\13\1\374"+
    "\24\0\7\13\1\0\10\13\10\0\15\13\2\0\3\13"+
    "\2\0\1\13\1\375\1\0\4\13\24\0\7\13\1\0"+
    "\10\13\10\0\12\13\1\376\2\13\2\0\3\13\2\0"+
    "\2\13\1\0\4\13\24\0\7\13\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\3\13\1\377"+
    "\24\0\7\13\1\0\10\13\10\0\15\13\2\0\3\13"+
    "\2\0\2\13\1\0\4\13\24\0\3\13\1\u0100\3\13"+
    "\1\0\10\13\10\0\15\13\2\0\3\13\2\0\2\13"+
    "\1\0\4\13\24\0\6\13\1\u0101\1\0\10\13\10\0"+
    "\15\13\2\0\3\13\2\0\2\13\1\0\4\13\24\0"+
    "\7\13\1\0\3\13\1\u0102\4\13\1\0";
  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\30\1\6\11\1\1\2\11"+
    "\2\1\1\11\16\1\2\11\11\1\1\11\3\1\1\11"+
    "\3\1\2\0\1\11\1\1\6\0\2\1\2\11\2\1"+
    "\2\0\1\11\3\0\6\1\1\11\1\1\1\11\1\1"+
    "\13\11\1\1\2\11\11\1\2\0\10\1\1\11\1\0"+
    "\4\1\1\0\5\1\2\11\7\1\3\11\7\1\1\0"+
    "\1\11\10\1\1\11\1\0\22\1\1\0\24\1\1\11"+
    "\42\1";
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  private static int [] zzUnpackTrans() {
    int [] result = new int[12567];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private final java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VlangLexer() {
    this(null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 106: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 107: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 108: break;
          case 4: 
            { return QUOTIENT;
            } 
            // fall through
          case 109: break;
          case 5: 
            { yybegin(MAYBE_SEMICOLON); return LANGUAGE_INJECTION;
            } 
            // fall through
          case 110: break;
          case 6: 
            { return MUL;
            } 
            // fall through
          case 111: break;
          case 7: 
            { yybegin(MAYBE_SEMICOLON); return IDENTIFIER;
            } 
            // fall through
          case 112: break;
          case 8: 
            { yybegin(MAYBE_SEMICOLON); return INT;
            } 
            // fall through
          case 113: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 114: break;
          case 10: 
            { return DOT;
            } 
            // fall through
          case 115: break;
          case 11: 
            { return LESS;
            } 
            // fall through
          case 116: break;
          case 12: 
            { return GREATER;
            } 
            // fall through
          case 117: break;
          case 13: 
            { yybegin(MAYBE_SEMICOLON); return RAW_STRING;
            } 
            // fall through
          case 118: break;
          case 14: 
            { return BIT_OR;
            } 
            // fall through
          case 119: break;
          case 15: 
            { return LBRACE;
            } 
            // fall through
          case 120: break;
          case 16: 
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            } 
            // fall through
          case 121: break;
          case 17: 
            { return LBRACK;
            } 
            // fall through
          case 122: break;
          case 18: 
            { yybegin(MAYBE_SEMICOLON); return RBRACK;
            } 
            // fall through
          case 123: break;
          case 19: 
            { return LPAREN;
            } 
            // fall through
          case 124: break;
          case 20: 
            { yybegin(MAYBE_SEMICOLON); return RPAREN;
            } 
            // fall through
          case 125: break;
          case 21: 
            { return COLON;
            } 
            // fall through
          case 126: break;
          case 22: 
            { return SEMICOLON;
            } 
            // fall through
          case 127: break;
          case 23: 
            { return COMMA;
            } 
            // fall through
          case 128: break;
          case 24: 
            { return ASSIGN;
            } 
            // fall through
          case 129: break;
          case 25: 
            { return NOT;
            } 
            // fall through
          case 130: break;
          case 26: 
            { return QUESTION;
            } 
            // fall through
          case 131: break;
          case 27: 
            { return PLUS;
            } 
            // fall through
          case 132: break;
          case 28: 
            { return BIT_AND;
            } 
            // fall through
          case 133: break;
          case 29: 
            { return BIT_XOR;
            } 
            // fall through
          case 134: break;
          case 30: 
            { return REMAINDER;
            } 
            // fall through
          case 135: break;
          case 31: 
            { yybegin(YYINITIAL); yypushback(yytext().length());
            } 
            // fall through
          case 136: break;
          case 32: 
            { yybegin(YYINITIAL); yypushback(yytext().length()); return SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 137: break;
          case 33: 
            { yybegin(YYINITIAL); return NLS;
            } 
            // fall through
          case 138: break;
          case 34: 
            { yybegin(MAYBE_SEMICOLON); return C_FLAG_VALUE;
            } 
            // fall through
          case 139: break;
          case 35: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 140: break;
          case 36: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 141: break;
          case 37: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 142: break;
          case 38: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 143: break;
          case 39: 
            { yybegin(MAYBE_SEMICOLON); return DECIMALI;
            } 
            // fall through
          case 144: break;
          case 40: 
            { return OR ;
            } 
            // fall through
          case 145: break;
          case 41: 
            { yybegin(MAYBE_SEMICOLON); return MINUS_MINUS;
            } 
            // fall through
          case 146: break;
          case 42: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 147: break;
          case 43: 
            { yybegin(MAYBE_SEMICOLON); return FLOAT;
            } 
            // fall through
          case 148: break;
          case 44: 
            { return RANGE;
            } 
            // fall through
          case 149: break;
          case 45: 
            { yybegin(MAYBE_SEMICOLON); return STRING;
            } 
            // fall through
          case 150: break;
          case 46: 
            { return AS ;
            } 
            // fall through
          case 151: break;
          case 47: 
            { return SEND_CHANNEL;
            } 
            // fall through
          case 152: break;
          case 48: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 153: break;
          case 49: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 154: break;
          case 50: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 155: break;
          case 51: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 156: break;
          case 52: 
            { return COND_OR;
            } 
            // fall through
          case 157: break;
          case 53: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 158: break;
          case 54: 
            { return VAR_ASSIGN;
            } 
            // fall through
          case 159: break;
          case 55: 
            { return EQ;
            } 
            // fall through
          case 160: break;
          case 56: 
            { return NOT_EQ;
            } 
            // fall through
          case 161: break;
          case 57: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 162: break;
          case 58: 
            { yybegin(MAYBE_SEMICOLON); return PLUS_PLUS;
            } 
            // fall through
          case 163: break;
          case 59: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 164: break;
          case 60: 
            { return COND_AND;
            } 
            // fall through
          case 165: break;
          case 61: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 166: break;
          case 62: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 167: break;
          case 63: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 168: break;
          case 64: 
            { return IN;
            } 
            // fall through
          case 169: break;
          case 65: 
            { return IF ;
            } 
            // fall through
          case 170: break;
          case 66: 
            { return FN;
            } 
            // fall through
          case 171: break;
          case 67: 
            { return GO;
            } 
            // fall through
          case 172: break;
          case 68: 
            { yybegin(YYINITIAL); return WS;
            } 
            // fall through
          case 173: break;
          case 69: 
            { yybegin(MAYBE_SEMICOLON); return HEX;
            } 
            // fall through
          case 174: break;
          case 70: 
            { yybegin(MAYBE_SEMICOLON); return OCT;
            } 
            // fall through
          case 175: break;
          case 71: 
            { yybegin(MAYBE_SEMICOLON); return BIN;
            } 
            // fall through
          case 176: break;
          case 72: 
            { yybegin(MAYBE_SEMICOLON); return FLOATI;
            } 
            // fall through
          case 177: break;
          case 73: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 178: break;
          case 74: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 179: break;
          case 75: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 180: break;
          case 76: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 181: break;
          case 77: 
            { return FOR ;
            } 
            // fall through
          case 182: break;
          case 78: 
            { return IF_COMPILE_TIME ;
            } 
            // fall through
          case 183: break;
          case 79: 
            { return MUT;
            } 
            // fall through
          case 184: break;
          case 80: 
            { return PUB;
            } 
            // fall through
          case 185: break;
          case 81: 
            { return CASE;
            } 
            // fall through
          case 186: break;
          case 82: 
            { return ENUM;
            } 
            // fall through
          case 187: break;
          case 83: 
            { return ELSE;
            } 
            // fall through
          case 188: break;
          case 84: 
            { return GOTO;
            } 
            // fall through
          case 189: break;
          case 85: 
            { return TYPE_;
            } 
            // fall through
          case 190: break;
          case 86: 
            { yybegin(C_FLAG_VALUE_EXPECTED); return C_FLAG;
            } 
            // fall through
          case 191: break;
          case 87: 
            { yybegin(MAYBE_SEMICOLON); return BREAK;
            } 
            // fall through
          case 192: break;
          case 88: 
            { return CONST;
            } 
            // fall through
          case 193: break;
          case 89: 
            { return DEFER;
            } 
            // fall through
          case 194: break;
          case 90: 
            { return ELSE_COMPILE_TIME ;
            } 
            // fall through
          case 195: break;
          case 91: 
            { return MATCH ;
            } 
            // fall through
          case 196: break;
          case 92: 
            { yybegin(MAYBE_SEMICOLON); return RETURN ;
            } 
            // fall through
          case 197: break;
          case 93: 
            { return ASSERT;
            } 
            // fall through
          case 198: break;
          case 94: 
            { return IMPORT ;
            } 
            // fall through
          case 199: break;
          case 95: 
            { return UNSAFE;
            } 
            // fall through
          case 200: break;
          case 96: 
            { return SELECT;
            } 
            // fall through
          case 201: break;
          case 97: 
            { return STRUCT;
            } 
            // fall through
          case 202: break;
          case 98: 
            { return SWITCH;
            } 
            // fall through
          case 203: break;
          case 99: 
            { return MODULE;
            } 
            // fall through
          case 204: break;
          case 100: 
            { return DEFAULT;
            } 
            // fall through
          case 205: break;
          case 101: 
            { yybegin(C_STRING_LITERAL); return C_INCLUDE;
            } 
            // fall through
          case 206: break;
          case 102: 
            { return BUILTIN_GLOBAL;
            } 
            // fall through
          case 207: break;
          case 103: 
            { yybegin(MAYBE_SEMICOLON); return CONTINUE ;
            } 
            // fall through
          case 208: break;
          case 104: 
            { return INTERFACE;
            } 
            // fall through
          case 209: break;
          case 105: 
            { yybegin(MAYBE_SEMICOLON); return FALLTHROUGH;
            } 
            // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
