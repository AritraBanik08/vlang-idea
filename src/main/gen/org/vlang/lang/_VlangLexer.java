/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.vlang.lang.psi.VlangDocElementTypes.DOC_COMMENT;
import static org.vlang.lang.psi.VlangTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>v.flex</tt>
 */
public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int STRING = 4;
  public static final int SINGLE_STRING = 6;
  public static final int MULTI_LINE_COMMENT_STATE = 8;
  public static final int LONG_TEMPLATE_ENTRY = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int ASM_BLOCK = 14;
  public static final int ASM_BLOCK_LINE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\5\1\6\1\4\22\0\1\2\1\11\1\55\1\7\1\57\1\103\1\100\1\56\1\71"+
    "\1\72\1\32\1\77\1\75\1\47\1\50\1\3\1\42\1\41\6\40\2\37\1\73\1\74\1\102\1\76"+
    "\1\104\1\65\1\54\2\36\1\53\1\36\1\46\1\36\3\33\1\51\10\33\1\52\1\33\1\64\2"+
    "\33\1\44\2\33\1\10\1\61\1\70\1\101\1\34\1\63\1\20\1\45\1\22\1\12\1\13\1\14"+
    "\1\21\1\107\1\15\1\33\1\30\1\17\1\105\1\16\1\31\1\27\1\33\1\25\1\24\1\26\1"+
    "\23\1\111\1\110\1\43\1\106\1\112\1\60\1\67\1\62\1\66\6\0\1\5\24\0\1\33\12"+
    "\0\1\33\4\0\1\33\5\0\27\33\1\0\12\33\4\0\14\33\16\0\5\33\7\0\1\33\1\0\1\33"+
    "\1\0\5\33\1\0\2\33\2\0\4\33\1\0\1\33\6\0\1\33\1\0\3\33\1\0\1\33\1\0\4\33\1"+
    "\0\23\33\1\0\13\33\10\0\6\33\1\0\26\33\2\0\1\33\6\0\10\33\10\0\13\33\5\0\3"+
    "\33\15\0\12\35\4\0\6\33\1\0\1\33\17\0\2\33\7\0\2\33\12\35\3\33\2\0\2\33\1"+
    "\0\16\33\15\0\11\33\13\0\1\33\16\0\12\35\6\33\4\0\2\33\4\0\1\33\5\0\6\33\4"+
    "\0\1\33\11\0\1\33\3\0\1\33\7\0\11\33\7\0\5\33\1\0\10\33\6\0\26\33\3\0\1\33"+
    "\2\0\1\33\7\0\12\33\4\0\12\35\1\33\4\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1"+
    "\0\1\33\3\0\4\33\3\0\1\33\20\0\1\33\15\0\2\33\1\0\1\33\5\0\6\33\4\0\2\33\1"+
    "\0\2\33\1\0\2\33\1\0\2\33\17\0\4\33\1\0\1\33\7\0\12\35\2\0\3\33\20\0\11\33"+
    "\1\0\2\33\1\0\2\33\1\0\5\33\3\0\1\33\2\0\1\33\30\0\1\33\13\0\10\33\2\0\1\33"+
    "\3\0\1\33\1\0\6\33\3\0\3\33\1\0\4\33\3\0\2\33\1\0\1\33\1\0\2\33\3\0\2\33\3"+
    "\0\3\33\3\0\14\33\13\0\10\33\1\0\2\33\10\0\3\33\5\0\1\33\4\0\10\33\1\0\6\33"+
    "\1\0\5\33\3\0\1\33\3\0\2\33\15\0\13\33\2\0\1\33\6\0\3\33\10\0\1\33\12\0\6"+
    "\33\5\0\22\33\3\0\10\33\1\0\11\33\1\0\1\33\2\0\7\33\11\0\1\33\1\0\2\33\14"+
    "\0\12\35\7\0\2\33\1\0\1\33\2\0\2\33\1\0\1\33\2\0\1\33\6\0\4\33\1\0\7\33\1"+
    "\0\3\33\1\0\1\33\1\0\1\33\2\0\2\33\1\0\4\33\1\0\2\33\11\0\1\33\2\0\5\33\1"+
    "\0\1\33\11\0\12\35\2\0\14\33\1\0\24\33\13\0\5\33\22\0\7\33\4\0\4\33\3\0\1"+
    "\33\3\0\2\33\7\0\3\33\4\0\15\33\14\0\1\33\1\0\6\33\1\0\1\33\5\0\1\33\2\0\13"+
    "\33\1\0\15\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0\1\33\1\0\4\33\2\0\7"+
    "\33\1\0\1\33\1\0\4\33\2\0\16\33\2\0\6\33\2\0\15\33\2\0\1\33\1\0\10\33\7\0"+
    "\15\33\1\0\6\33\23\0\1\33\4\0\1\33\3\0\5\33\2\0\22\33\1\0\1\33\5\0\17\33\1"+
    "\0\16\33\2\0\5\33\13\0\14\33\13\0\1\33\15\0\7\33\7\0\16\33\15\0\2\33\12\35"+
    "\3\0\3\33\11\0\4\33\1\0\4\33\3\0\2\33\11\0\10\33\1\0\1\33\1\0\1\33\1\0\1\33"+
    "\1\0\6\33\1\0\7\33\1\0\1\33\3\0\3\33\1\0\7\33\3\0\4\33\2\0\6\33\14\0\2\5\7"+
    "\0\1\33\15\0\1\33\2\0\1\33\4\0\1\33\2\0\12\33\1\0\1\33\3\0\5\33\6\0\1\33\1"+
    "\0\1\33\1\0\1\33\1\0\4\33\1\0\13\33\2\0\4\33\5\0\5\33\4\0\1\33\4\0\2\33\13"+
    "\0\5\33\6\0\4\33\3\0\2\33\14\0\10\33\7\0\10\33\1\0\7\33\6\0\2\33\12\0\5\33"+
    "\5\0\2\33\3\0\7\33\6\0\3\33\12\35\2\33\13\0\11\33\2\0\27\33\2\0\7\33\1\0\3"+
    "\33\1\0\4\33\1\0\4\33\2\0\6\33\3\0\1\33\1\0\1\33\2\0\5\33\1\0\12\33\12\35"+
    "\5\33\1\0\3\33\1\0\10\33\4\0\7\33\3\0\1\33\3\0\2\33\1\0\1\33\3\0\2\33\2\0"+
    "\5\33\2\0\1\33\1\0\1\33\30\0\3\33\3\0\6\33\2\0\6\33\2\0\6\33\11\0\7\33\4\0"+
    "\5\33\3\0\5\33\5\0\1\33\1\0\10\33\1\0\5\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0"+
    "\12\33\6\0\12\33\2\0\6\33\2\0\6\33\2\0\6\33\2\0\3\33\3\0\14\33\1\0\16\33\1"+
    "\0\2\33\1\0\2\33\1\0\10\33\6\0\4\33\4\0\16\33\2\0\1\33\1\0\14\33\1\0\2\33"+
    "\3\0\1\33\2\0\4\33\1\0\2\33\12\0\10\33\6\0\6\33\1\0\3\33\1\0\12\33\3\0\1\33"+
    "\12\0\4\33\13\0\12\35\1\33\1\0\1\33\3\0\7\33\1\0\1\33\1\0\4\33\1\0\17\33\1"+
    "\0\2\33\14\0\3\33\7\0\4\33\11\0\2\33\1\0\1\33\20\0\4\33\10\0\1\33\13\0\10"+
    "\33\5\0\3\33\2\0\1\33\2\0\2\33\2\0\4\33\1\0\14\33\1\0\1\33\1\0\7\33\1\0\21"+
    "\33\1\0\4\33\2\0\10\33\1\0\7\33\1\0\14\33\1\0\4\33\1\0\5\33\1\0\1\33\3\0\14"+
    "\33\2\0\13\33\1\0\10\33\2\0\22\35\1\0\2\33\1\0\1\33\2\0\1\33\1\0\12\33\1\0"+
    "\4\33\1\0\1\33\1\0\1\33\6\0\1\33\4\0\1\33\1\0\1\33\1\0\1\33\1\0\3\33\1\0\2"+
    "\33\1\0\1\33\2\0\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0\2\33\1\0\1\33"+
    "\2\0\4\33\1\0\7\33\1\0\4\33\1\0\4\33\1\0\1\33\1\0\12\33\1\0\5\33\1\0\3\33"+
    "\1\0\5\33\1\0\5\33");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\20\7\1\10\1\7\2\11\1\7\1\12\1\13\2\7"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\7"+
    "\1\43\1\44\1\3\2\43\1\45\1\46\1\45\1\1"+
    "\1\45\3\47\1\50\1\51\1\1\2\52\2\53\1\54"+
    "\1\53\3\55\1\15\1\16\1\56\2\0\1\57\1\60"+
    "\1\61\1\62\1\63\5\62\1\0\1\64\1\65\4\7"+
    "\1\66\2\7\1\67\1\70\1\71\4\7\1\72\1\73"+
    "\11\7\2\0\3\7\1\74\1\75\1\7\6\0\1\7"+
    "\1\76\1\77\1\100\1\101\1\0\3\7\1\0\1\102"+
    "\1\0\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\0\4\7\1\122\1\60\1\123\1\124\1\125\1\126"+
    "\1\127\1\53\1\60\1\57\1\0\1\130\4\62\1\131"+
    "\1\132\5\7\1\133\3\7\1\134\3\7\1\135\14\7"+
    "\1\136\2\7\1\137\2\7\1\100\1\0\1\140\1\141"+
    "\1\142\1\7\1\0\1\143\1\7\1\0\2\7\1\144"+
    "\1\102\3\0\1\145\1\0\1\146\1\147\1\150\1\0"+
    "\1\7\1\151\2\7\1\0\1\53\1\55\1\152\5\62"+
    "\1\153\1\7\1\154\1\155\1\156\4\7\1\157\1\160"+
    "\1\7\1\161\14\7\1\162\1\163\2\7\4\0\2\7"+
    "\1\164\4\0\1\165\3\7\1\53\1\152\1\62\1\166"+
    "\3\62\1\167\1\170\4\7\1\171\1\7\1\172\5\7"+
    "\1\173\2\7\1\174\3\7\1\175\1\176\1\0\2\102"+
    "\1\0\1\177\2\7\1\53\4\62\2\7\1\200\1\201"+
    "\1\7\1\202\1\203\1\204\1\205\1\206\1\207\1\210"+
    "\1\211\2\7\4\0\1\212\1\7\1\53\1\62\5\7"+
    "\3\0\1\7\1\53\1\62\2\7\1\213\1\214\1\7"+
    "\2\0\2\215\1\216\1\217\1\7\2\102\1\220\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u02a3\0\u041a"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u02a3\0\u02a3\0\u0c03\0\u02a3\0\u02a3\0\u0c4e"+
    "\0\u0c99\0\u02a3\0\u0ce4\0\u02a3\0\u02a3\0\u02a3\0\u0d2f\0\u02a3"+
    "\0\u02a3\0\u0d7a\0\u0dc5\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c"+
    "\0\u0f87\0\u0fd2\0\u02a3\0\u02a3\0\u02a3\0\u101d\0\u1068\0\u10b3"+
    "\0\u02a3\0\u10fe\0\u1149\0\u1194\0\u02a3\0\u11df\0\u122a\0\u02a3"+
    "\0\u02a3\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u02a3\0\u13ec"+
    "\0\u1437\0\u1482\0\u14cd\0\u1437\0\u1437\0\u02a3\0\u0339\0\u1518"+
    "\0\u1563\0\u15ae\0\u02a3\0\u15f9\0\u02a3\0\u1644\0\u168f\0\u16da"+
    "\0\u1725\0\u1770\0\u17bb\0\u02a3\0\u02a3\0\u1806\0\u1851\0\u189c"+
    "\0\u18e7\0\u087f\0\u1932\0\u197d\0\u087f\0\u19c8\0\u1a13\0\u1a5e"+
    "\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6"+
    "\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e"+
    "\0\u1f59\0\u1fa4\0\u1fef\0\u087f\0\u02a3\0\u203a\0\u2085\0\u20d0"+
    "\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u02a3\0\u02a3\0\u2292"+
    "\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u2454\0\u249f"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3"+
    "\0\u24ea\0\u02a3\0\u02a3\0\u02a3\0\u2535\0\u02a3\0\u02a3\0\u2580"+
    "\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904"+
    "\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u087f\0\u2c3d\0\u2c88\0\u2cd3\0\u087f"+
    "\0\u2d1e\0\u2d69\0\u2db4\0\u087f\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0"+
    "\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u02a3\0\u3183\0\u31ce\0\u087f\0\u3219\0\u3264\0\u32af\0\u32fa"+
    "\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u02a3\0\u34bc\0\u3507"+
    "\0\u3552\0\u359d\0\u087f\0\u02a3\0\u35e8\0\u3633\0\u367e\0\u2454"+
    "\0\u36c9\0\u02a3\0\u02a3\0\u02a3\0\u3714\0\u375f\0\u087f\0\u37aa"+
    "\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u02a3\0\u3921\0\u396c\0\u39b7"+
    "\0\u3a02\0\u3a4d\0\u02a3\0\u3a98\0\u087f\0\u087f\0\u087f\0\u3ae3"+
    "\0\u3b2e\0\u3b79\0\u3bc4\0\u087f\0\u087f\0\u3c0f\0\u087f\0\u3c5a"+
    "\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2"+
    "\0\u3efd\0\u3f48\0\u3f93\0\u087f\0\u3fde\0\u4029\0\u4074\0\u32af"+
    "\0\u3345\0\u3390\0\u33db\0\u40bf\0\u410a\0\u087f\0\u4155\0\u41a0"+
    "\0\u41eb\0\u4236\0\u02a3\0\u4281\0\u42cc\0\u4317\0\u4362\0\u1437"+
    "\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u087f\0\u087f\0\u4524"+
    "\0\u456f\0\u45ba\0\u4605\0\u087f\0\u4650\0\u087f\0\u469b\0\u46e6"+
    "\0\u4731\0\u477c\0\u47c7\0\u087f\0\u4812\0\u485d\0\u087f\0\u48a8"+
    "\0\u48f3\0\u493e\0\u087f\0\u087f\0\u4989\0\u49d4\0\u4a1f\0\u4a6a"+
    "\0\u087f\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c\0\u4c77"+
    "\0\u4cc2\0\u4d0d\0\u087f\0\u087f\0\u4d58\0\u087f\0\u087f\0\u087f"+
    "\0\u087f\0\u087f\0\u087f\0\u087f\0\u087f\0\u4da3\0\u4dee\0\u4e39"+
    "\0\u4e84\0\u4ecf\0\u4f1a\0\u087f\0\u4f65\0\u4fb0\0\u4ffb\0\u5046"+
    "\0\u5091\0\u50dc\0\u5127\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e"+
    "\0\u52e9\0\u5334\0\u537f\0\u53ca\0\u087f\0\u087f\0\u5415\0\u5460"+
    "\0\u54ab\0\u087f\0\u1356\0\u087f\0\u087f\0\u54f6\0\u5541\0\u558c"+
    "\0\u087f\0\u55d7\0\u5622\0\u566d\0\u56b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\2\12\1\14\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\37\1\42\1\12\1\37\3\43\1\44"+
    "\2\37\1\45\1\37\1\46\1\47\1\50\1\37\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\12\1\57\1\60"+
    "\1\37\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\3\37\1\102\1\37\1\103\1\104\1\105"+
    "\1\106\2\12\1\105\13\103\1\107\32\103\1\53\1\54"+
    "\34\103\55\110\1\111\1\110\1\112\1\110\1\113\31\110"+
    "\56\114\1\111\1\112\1\114\1\113\31\114\3\115\1\116"+
    "\26\115\1\117\60\115\1\12\1\13\1\14\1\15\2\12"+
    "\1\14\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\37\1\42\1\12"+
    "\1\37\3\43\1\44\2\37\1\45\1\37\1\46\1\47"+
    "\1\50\1\37\1\51\1\52\1\53\1\54\1\55\1\120"+
    "\1\12\1\121\1\60\1\37\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\3\37\1\102\1\37"+
    "\3\12\1\122\6\12\10\123\1\124\7\123\1\12\2\123"+
    "\1\12\1\123\4\12\4\123\2\12\3\123\1\12\1\53"+
    "\1\54\5\12\1\123\20\12\6\123\1\12\1\13\1\105"+
    "\1\122\2\12\1\105\3\12\10\125\1\126\7\125\1\12"+
    "\2\125\1\12\1\125\4\12\4\125\2\12\3\125\1\12"+
    "\1\53\1\54\1\12\1\127\3\12\1\125\20\12\4\125"+
    "\1\130\1\125\1\131\1\13\1\131\1\132\1\12\15\131"+
    "\1\133\32\131\1\134\1\135\3\131\1\136\30\131\114\0"+
    "\1\13\113\0\1\137\1\140\2\0\1\137\107\0\1\141"+
    "\26\0\1\142\43\0\1\143\14\0\10\144\1\145\1\146"+
    "\1\147\1\144\1\150\1\151\11\144\1\152\63\144\15\0"+
    "\1\153\32\0\1\154\25\0\1\155\26\0\1\37\1\156"+
    "\7\37\1\157\6\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\4\37\1\160\1\161\12\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\4\37\1\162\1\37\1\163\10\37\1\164\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\2\37\1\165\1\37\1\166\5\37\1\167\5\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\1\170\5\37"+
    "\12\0\3\37\1\171\13\37\1\172\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\17\37\1\173"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\12\37\1\174\5\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\17\37\1\175\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\17\37\1\176\1\0\14\37\2\0\3\37\1\0\1\53"+
    "\1\54\5\0\1\37\20\0\6\37\12\0\4\37\1\177"+
    "\13\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\1\37\1\200\1\37\1\201\10\37\1\202"+
    "\1\203\2\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\2\37\1\204\3\37\12\0\1\37\1\205\3\37"+
    "\1\206\12\37\1\0\14\37\2\0\3\37\1\0\1\207"+
    "\1\210\5\0\1\37\20\0\6\37\12\0\13\37\1\211"+
    "\4\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\1\37\1\212\4\37\12\0\11\37\1\213\6\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\20\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\13\37\1\214\4\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\76\0\1\215\26\0"+
    "\20\37\1\0\1\37\1\216\12\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\13\0\1\217\20\0\1\220\2\0"+
    "\4\43\3\0\1\217\1\0\1\221\55\0\1\217\15\0"+
    "\1\222\2\0\1\220\2\0\4\43\2\223\1\224\1\217"+
    "\1\0\1\221\54\0\13\37\1\225\4\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\47\0\1\226"+
    "\26\0\1\227\53\0\4\230\5\0\1\231\54\0\20\37"+
    "\1\0\14\37\2\0\1\37\1\51\1\37\10\0\1\37"+
    "\20\0\6\37\12\0\20\37\1\0\14\37\1\0\1\232"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\20\37\1\0"+
    "\2\37\1\0\1\37\4\0\4\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\1\37\1\233\1\234\1\235"+
    "\14\37\1\0\2\37\1\0\1\37\4\0\4\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\1\236\1\237\57\236"+
    "\1\240\1\236\1\237\27\236\50\0\1\154\131\0\1\241"+
    "\6\0\1\242\112\0\1\243\112\0\1\244\112\0\1\245"+
    "\1\246\111\0\1\247\1\0\1\250\1\251\107\0\1\252"+
    "\63\0\1\253\26\0\1\254\3\0\1\255\106\0\1\256"+
    "\112\0\1\257\5\0\1\260\20\0\6\37\1\261\2\37"+
    "\1\262\5\37\1\263\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\17\37\1\264\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\3\0\1\265"+
    "\26\0\1\266\135\0\1\53\1\54\34\0\55\110\1\0"+
    "\1\110\1\0\1\110\1\0\31\110\12\0\20\267\1\0"+
    "\2\267\1\0\1\267\4\0\4\267\2\0\3\267\4\0"+
    "\1\270\3\0\1\267\20\0\6\267\1\271\1\0\2\271"+
    "\3\0\104\271\56\114\2\0\1\114\1\0\31\114\32\0"+
    "\1\272\63\0\1\273\141\0\1\266\72\0\20\123\1\0"+
    "\14\123\2\0\3\123\10\0\1\123\20\0\6\123\12\0"+
    "\20\123\1\0\14\123\2\0\3\123\1\0\1\53\1\54"+
    "\5\0\1\123\20\0\6\123\12\0\20\125\1\0\14\125"+
    "\2\0\3\125\10\0\1\125\20\0\6\125\12\0\20\125"+
    "\1\0\14\125\2\0\3\125\1\0\1\53\1\54\5\0"+
    "\1\125\20\0\6\125\12\0\17\125\1\274\1\0\14\125"+
    "\2\0\3\125\10\0\1\125\20\0\6\125\1\131\1\0"+
    "\2\131\1\0\55\131\1\0\31\131\1\0\2\131\1\0"+
    "\25\131\1\275\27\131\1\0\31\131\1\0\2\131\1\0"+
    "\50\131\1\134\1\135\3\131\1\0\30\131\3\0\1\276"+
    "\107\0\1\141\1\137\2\141\1\0\2\265\104\141\32\0"+
    "\1\277\60\0\1\144\1\0\2\144\1\0\106\144\10\300"+
    "\1\144\102\300\1\144\1\0\2\144\1\0\6\144\1\301"+
    "\100\144\1\0\2\144\1\0\12\144\1\302\74\144\1\0"+
    "\2\144\1\0\11\144\1\303\75\144\1\0\2\144\1\0"+
    "\23\144\1\304\62\144\16\0\1\305\5\0\1\306\100\0"+
    "\2\37\1\307\15\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\20\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\1\310\5\37\12\0\11\37"+
    "\1\311\6\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\12\37\1\312\5\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\5\37"+
    "\1\313\12\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\13\37\1\314\4\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\14\37"+
    "\1\315\3\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\13\37\1\316\4\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\15\37"+
    "\1\317\2\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\5\37\1\320\12\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\4\37"+
    "\1\321\13\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\10\37\1\322\7\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\12\37"+
    "\1\323\5\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\1\324\5\37\12\0\14\37\1\325\3\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\4\37\1\326\13\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\3\37\1\327\6\37\1\330"+
    "\5\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\5\37\1\331\12\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\20\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\5\37\1\332"+
    "\12\0\6\37\1\333\4\37\1\334\4\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\6\37"+
    "\1\335\11\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\6\37\1\336\11\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\14\37"+
    "\1\337\3\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\17\37\1\340\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\55\207\1\341\35\207"+
    "\56\210\1\341\34\210\12\0\11\37\1\342\6\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\15\37\1\343\2\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\20\37\1\0\12\37\1\344"+
    "\1\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\7\37\1\345\7\37\1\346\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\37\0\4\347\4\0\1\350"+
    "\27\0\1\350\47\0\1\220\2\0\4\43\107\0\4\230"+
    "\110\0\3\351\62\0\3\352\3\0\1\352\1\0\1\352"+
    "\13\0\5\352\2\0\2\352\4\0\1\352\100\0\2\353"+
    "\62\0\1\37\1\354\16\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\13\0\1\217\20\0\1\355"+
    "\2\0\4\230\3\0\1\217\114\0\1\356\54\0\20\357"+
    "\1\0\2\357\1\0\1\357\4\0\4\357\2\0\3\357"+
    "\1\360\7\0\1\357\20\0\6\357\12\0\5\37\1\361"+
    "\12\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\17\37\1\362\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\2\37\1\363\15\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\63\0\1\364\27\0\1\236\1\0\2\236\3\0\14\236"+
    "\1\365\14\236\3\366\1\367\17\236\1\370\1\371\26\236"+
    "\76\0\1\372\112\0\1\373\112\0\1\374\5\0\1\375"+
    "\20\0\14\37\1\376\3\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\14\37\1\377\3\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\1\u0100\17\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\5\37\1\u0101\12\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\1\265"+
    "\1\0\2\265\1\0\106\265\32\0\1\u0102\72\0\20\267"+
    "\1\0\14\267\2\0\3\267\10\0\1\267\20\0\6\267"+
    "\12\0\5\125\1\u0103\12\125\1\0\14\125\2\0\3\125"+
    "\10\0\1\125\20\0\6\125\1\131\1\0\2\131\1\0"+
    "\25\131\1\u0104\27\131\1\0\30\131\1\276\1\137\2\276"+
    "\3\0\104\276\3\0\1\u0105\26\0\1\277\60\0\1\300"+
    "\1\0\2\300\1\0\106\300\1\144\1\0\2\144\1\0"+
    "\7\144\1\u0106\77\144\1\0\2\144\1\0\13\144\1\u0107"+
    "\73\144\1\0\2\144\1\0\15\144\1\u0108\1\144\1\u0109"+
    "\67\144\1\0\2\144\1\0\14\144\1\u010a\71\144\12\0"+
    "\20\u010b\1\0\14\u010b\2\0\3\u010b\10\0\1\u010b\20\0"+
    "\6\u010b\12\0\1\37\1\u010c\16\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\15\37\1\u010d"+
    "\2\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\20\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\1\u010e\5\37\12\0\1\37\1\u010f\16\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\12\37\1\u0110\5\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\1\37\1\u0111\16\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\1\37\1\u0112\16\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\17\37\1\u0113\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\1\37\1\u0114\16\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\16\37\1\u0115\1\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\1\37\1\u0116\16\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\17\37\1\u0117\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\12\37"+
    "\1\u0118\1\37\1\u0119\3\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\17\37\1\u011a\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\6\37\1\u011b\11\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\1\37\1\u011c\16\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\1\37\1\u011d\16\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\14\37\1\u011e\3\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\11\37\1\u011f\6\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\20\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\3\37\1\u0120\2\37\12\0"+
    "\13\37\1\u0121\4\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\11\37\1\u0122\6\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\10\37\1\u0123\7\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\1\37\1\u0124\16\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\1\37\1\u0125\16\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\5\37\1\u0126\12\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\2\37\1\u0127\15\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\34\0\1\u0128\2\0\4\347\107\0"+
    "\4\347\104\0\1\u0129\3\0\3\351\62\0\3\352\3\0"+
    "\1\352\1\0\1\352\11\0\1\u012a\1\0\5\352\2\0"+
    "\2\352\4\0\1\352\73\0\1\u012b\4\0\2\353\62\0"+
    "\6\37\1\u012c\11\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\34\0\1\355\2\0\4\230\62\0"+
    "\20\357\1\0\14\357\1\0\4\357\10\0\1\357\20\0"+
    "\6\357\12\0\20\357\1\0\2\357\1\0\1\357\4\0"+
    "\4\357\2\0\3\357\10\0\1\357\20\0\6\357\12\0"+
    "\12\37\1\u012d\5\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\13\37\1\u012e\4\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\3\u012f\3\0\1\u012f\1\0\1\u012f\13\0\5\u012f\2\0"+
    "\2\u012f\4\0\1\u012f\7\0\1\364\67\0\3\u0130\20\0"+
    "\1\364\41\0\3\u0131\3\0\1\u0131\1\0\1\u0131\13\0"+
    "\5\u0131\2\0\2\u0131\4\0\1\u0131\7\0\1\364\41\0"+
    "\3\u0132\3\0\1\u0132\1\0\1\u0132\13\0\5\u0132\2\0"+
    "\2\u0132\4\0\1\u0132\7\0\1\364\125\0\1\u0133\26\0"+
    "\10\37\1\u0134\7\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\11\37\1\u0135\6\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\6\37\1\u0136\11\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\3\0\1\u0105\121\0\6\125\1\u0137"+
    "\11\125\1\0\14\125\2\0\3\125\10\0\1\125\20\0"+
    "\6\125\1\131\1\0\1\131\1\u0138\1\0\55\131\1\0"+
    "\30\131\1\144\1\0\2\144\1\0\10\144\1\u0139\76\144"+
    "\1\0\2\144\1\0\14\144\1\u013a\72\144\1\0\2\144"+
    "\1\0\12\144\1\u013b\74\144\1\0\2\144\1\0\6\144"+
    "\1\u013c\100\144\1\0\2\144\1\0\15\144\1\u013d\70\144"+
    "\12\0\13\37\1\u013e\4\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\1\37\1\u013f\16\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\13\37\1\u0140\4\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\2\37\1\u0141\15\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\13\37\1\u0142\4\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\13\37\1\u0143\4\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\14\37\1\u0144\3\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\3\37\1\u0145\14\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\4\37\1\u0146\13\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\2\37\1\u0147\15\37"+
    "\1\0\14\37\2\0\3\37\10\0\1\37\20\0\6\37"+
    "\12\0\10\37\1\u0148\7\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\6\37\12\0\17\37\1\u0149\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\3\37\1\u014a\14\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\10\37\1\u014b\7\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\4\37\1\u014c\13\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\1\37\1\u014d\16\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\13\37\1\u014e\4\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\16\37\1\u014f\1\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\17\37\1\u0150\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\17\37\1\u0151\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\2\37\1\u0152"+
    "\15\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\16\37\1\u0153\1\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\1\37\1\u0154"+
    "\16\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\3\u0155\3\0\1\u0155\1\0\1\u0155\13\0"+
    "\5\u0155\2\0\2\u0155\4\0\1\u0155\77\0\3\u0156\62\0"+
    "\3\u0157\3\0\1\u0157\1\0\1\u0157\13\0\5\u0157\2\0"+
    "\2\u0157\4\0\1\u0157\51\0\3\u0158\3\0\1\u0158\1\0"+
    "\1\u0158\13\0\5\u0158\2\0\2\u0158\4\0\1\u0158\51\0"+
    "\20\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\2\37\1\u0159\3\37\12\0\5\37\1\u015a\12\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\14\37\1\u015b\3\37\1\0\14\37\2\0\3\37\10\0"+
    "\1\37\20\0\6\37\12\0\14\125\1\u015c\3\125\1\0"+
    "\14\125\2\0\3\125\10\0\1\125\20\0\6\125\1\144"+
    "\1\0\2\144\1\0\11\144\1\u015d\74\144\1\u013a\1\0"+
    "\2\u013a\1\0\106\u013a\1\144\1\0\2\144\1\0\16\144"+
    "\1\u015e\70\144\1\0\2\144\1\0\20\144\1\u015f\66\144"+
    "\1\0\2\144\1\0\24\144\1\u0160\61\144\12\0\2\37"+
    "\1\u0161\15\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\14\37\1\u0162\3\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\14\37"+
    "\1\u0163\3\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\14\37\1\u0164\3\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\4\37"+
    "\1\u0165\13\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\1\37\1\u0166\16\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\14\37"+
    "\1\u0167\3\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\2\37\1\u0168\15\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\10\37"+
    "\1\u0169\7\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\14\37\1\u016a\3\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\1\u016b"+
    "\17\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\4\37\1\u016c\13\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\2\37\1\u016d"+
    "\15\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\20\37\1\0\12\37\1\u016e\1\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\12\37\1\u016f"+
    "\5\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\3\u0170\3\0\1\u0170\1\0\1\u0170\13\0"+
    "\5\u0170\2\0\2\u0170\4\0\1\u0170\120\0\1\u0171\1\0"+
    "\1\364\110\0\1\u0172\1\0\1\364\41\0\3\u0173\3\0"+
    "\1\u0173\1\0\1\u0173\13\0\5\u0173\2\0\2\u0173\4\0"+
    "\1\u0173\51\0\1\37\1\u0174\16\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\3\37\1\u0175"+
    "\14\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\3\125\1\u0176\14\125\1\0\14\125\2\0"+
    "\3\125\10\0\1\125\20\0\6\125\1\144\1\0\2\144"+
    "\1\0\6\144\1\u013a\100\144\1\0\2\144\1\0\5\144"+
    "\1\u015d\101\144\1\0\2\144\1\0\21\144\1\u013a\65\144"+
    "\1\0\2\144\1\0\11\144\1\u0177\74\144\12\0\6\37"+
    "\1\u0178\11\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\20\37\1\0\14\37\2\0\3\37"+
    "\10\0\1\37\20\0\1\37\1\u0179\4\37\12\0\11\37"+
    "\1\u017a\6\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\6\37\1\u017b\11\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\1\37"+
    "\1\u017c\16\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\3\237\3\0\1\237\1\0\1\237"+
    "\13\0\5\237\2\0\2\237\4\0\1\237\77\0\3\u017d"+
    "\113\0\1\u017e\61\0\3\u017f\3\0\1\u017f\1\0\1\u017f"+
    "\13\0\5\u017f\2\0\2\u017f\4\0\1\u017f\51\0\5\37"+
    "\1\u0180\12\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\5\125\1\u0181\12\125\1\0\14\125"+
    "\2\0\3\125\10\0\1\125\20\0\6\125\1\144\1\0"+
    "\2\144\1\0\7\144\1\u0182\76\144\12\0\10\37\1\u0183"+
    "\7\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\15\37\1\u0184\2\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\1\37\1\u0185"+
    "\16\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\12\0\5\37\1\u0186\12\37\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\12\0\14\37\1\u0187"+
    "\3\37\1\0\14\37\2\0\3\37\10\0\1\37\20\0"+
    "\6\37\40\0\3\u0188\62\0\3\u0189\3\0\1\u0189\1\0"+
    "\1\u0189\13\0\5\u0189\2\0\2\u0189\4\0\1\u0189\51\0"+
    "\3\u012f\3\0\1\u012f\1\0\1\u012f\13\0\5\u012f\2\0"+
    "\2\u012f\4\0\1\u012f\51\0\1\37\1\u018a\16\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\12\0"+
    "\1\125\1\u018b\16\125\1\0\14\125\2\0\3\125\10\0"+
    "\1\125\20\0\6\125\1\144\1\0\2\144\1\0\10\144"+
    "\1\u0107\75\144\12\0\1\37\1\u018c\16\37\1\0\14\37"+
    "\2\0\3\37\10\0\1\37\20\0\6\37\12\0\1\37"+
    "\1\u018d\16\37\1\0\14\37\2\0\3\37\10\0\1\37"+
    "\20\0\6\37\12\0\17\37\1\u018e\1\0\14\37\2\0"+
    "\3\37\10\0\1\37\20\0\6\37\40\0\3\u018f\62\0"+
    "\3\u0190\3\0\1\u0190\1\0\1\u0190\13\0\5\u0190\2\0"+
    "\2\u0190\4\0\1\u0190\51\0\2\37\1\u0191\15\37\1\0"+
    "\14\37\2\0\3\37\10\0\1\37\20\0\6\37\61\0"+
    "\1\u0192\1\0\1\364\110\0\1\u0193\1\0\1\364\67\0"+
    "\3\u0194\113\0\1\u0155\107\0\3\u0195\110\0\3\237\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22275];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\33\1\2\11\1\1\2\11"+
    "\2\1\1\11\1\1\3\11\1\1\2\11\11\1\3\11"+
    "\3\1\1\11\3\1\1\11\2\1\2\11\5\1\1\11"+
    "\6\1\1\11\2\0\2\1\1\11\1\1\1\11\5\1"+
    "\1\0\2\11\31\1\2\0\4\1\1\11\1\1\6\0"+
    "\1\1\2\11\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\10\11\1\1\3\11\1\1\2\11\1\0\7\1\4\11"+
    "\3\1\1\0\41\1\1\11\6\1\1\0\4\1\1\0"+
    "\1\11\1\1\1\0\3\1\1\11\3\0\1\1\1\0"+
    "\3\11\1\0\4\1\1\0\2\1\1\11\5\1\1\11"+
    "\34\1\4\0\3\1\4\0\1\11\41\1\1\0\2\1"+
    "\1\0\27\1\4\0\11\1\3\0\10\1\2\0\10\1"+
    "\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    public State(int state, int lBraceCount) {
        this.state = state;
        this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
        return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  private final Stack<State> states = new Stack<State>();
  private int lBraceCount;

  private int commentStart;
  private int commentDepth;

  private void pushState(int state) {
    states.push(new State(yystate(), lBraceCount));
    lBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = states.pop();
    lBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  private void popMaybeSemicolonState() {
     // if there is nested state with semicolon
     if (states.peek().state == MAYBE_SEMICOLON) {
       states.pop();
     }
     popState();
  }

  public _VlangLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case MULTI_LINE_COMMENT_STATE: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return MULTI_LINE_COMMENT;
            }  // fall though
            case 406: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 145: break;
          case 2: 
            { return NLS;
            } 
            // fall through
          case 146: break;
          case 3: 
            { return WS;
            } 
            // fall through
          case 147: break;
          case 4: 
            { return QUOTIENT;
            } 
            // fall through
          case 148: break;
          case 5: 
            { return LBRACK;
            } 
            // fall through
          case 149: break;
          case 6: 
            { pushState(MAYBE_SEMICOLON); return NOT;
            } 
            // fall through
          case 150: break;
          case 7: 
            { pushState(MAYBE_SEMICOLON); return IDENTIFIER;
            } 
            // fall through
          case 151: break;
          case 8: 
            { return MUL;
            } 
            // fall through
          case 152: break;
          case 9: 
            { pushState(MAYBE_SEMICOLON); return INT;
            } 
            // fall through
          case 153: break;
          case 10: 
            { return MINUS;
            } 
            // fall through
          case 154: break;
          case 11: 
            { return DOT;
            } 
            // fall through
          case 155: break;
          case 12: 
            { return AT;
            } 
            // fall through
          case 156: break;
          case 13: 
            { pushState(STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 157: break;
          case 14: 
            { pushState(SINGLE_STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 158: break;
          case 15: 
            { return DOLLAR;
            } 
            // fall through
          case 159: break;
          case 16: 
            { return LBRACE;
            } 
            // fall through
          case 160: break;
          case 17: 
            { pushState(MAYBE_SEMICOLON); return RBRACE;
            } 
            // fall through
          case 161: break;
          case 18: 
            { return BACKTICK;
            } 
            // fall through
          case 162: break;
          case 19: 
            { pushState(MAYBE_SEMICOLON); return QUESTION;
            } 
            // fall through
          case 163: break;
          case 20: 
            { return TILDA;
            } 
            // fall through
          case 164: break;
          case 21: 
            { return BIT_OR;
            } 
            // fall through
          case 165: break;
          case 22: 
            { pushState(MAYBE_SEMICOLON); return RBRACK;
            } 
            // fall through
          case 166: break;
          case 23: 
            { return LPAREN;
            } 
            // fall through
          case 167: break;
          case 24: 
            { pushState(MAYBE_SEMICOLON); return RPAREN;
            } 
            // fall through
          case 168: break;
          case 25: 
            { pushState(MAYBE_SEMICOLON); return COLON;
            } 
            // fall through
          case 169: break;
          case 26: 
            { return SEMICOLON;
            } 
            // fall through
          case 170: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 171: break;
          case 28: 
            { return ASSIGN;
            } 
            // fall through
          case 172: break;
          case 29: 
            { return PLUS;
            } 
            // fall through
          case 173: break;
          case 30: 
            { return BIT_AND;
            } 
            // fall through
          case 174: break;
          case 31: 
            { return BIT_XOR;
            } 
            // fall through
          case 175: break;
          case 32: 
            { return LESS;
            } 
            // fall through
          case 176: break;
          case 33: 
            { return REMAINDER;
            } 
            // fall through
          case 177: break;
          case 34: 
            { pushState(MAYBE_SEMICOLON); return GREATER;
            } 
            // fall through
          case 178: break;
          case 35: 
            { popMaybeSemicolonState(); yypushback(yytext().length());
            } 
            // fall through
          case 179: break;
          case 36: 
            { popMaybeSemicolonState();
                                            yypushback(yytext().length());
                                            return SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 180: break;
          case 37: 
            { return LITERAL_STRING_TEMPLATE_ENTRY;
            } 
            // fall through
          case 181: break;
          case 38: 
            { popState(); pushState(MAYBE_SEMICOLON); return CLOSING_QUOTE;
            } 
            // fall through
          case 182: break;
          case 39: 
            { 
            } 
            // fall through
          case 183: break;
          case 40: 
            { lBraceCount++; return LBRACE;
            } 
            // fall through
          case 184: break;
          case 41: 
            { if (lBraceCount == 0) {
                                                      popState();
                                                      return TEMPLATE_ENTRY_END;
                                                    }
                                                    lBraceCount--;
                                                    pushState(MAYBE_SEMICOLON);
                                                    return RBRACE;
            } 
            // fall through
          case 185: break;
          case 42: 
            { popState(); return IDENTIFIER;
            } 
            // fall through
          case 186: break;
          case 43: 
            { return IDENTIFIER;
            } 
            // fall through
          case 187: break;
          case 44: 
            { yybegin(ASM_BLOCK_LINE); return LBRACE;
            } 
            // fall through
          case 188: break;
          case 45: 
            { return ASM_LINE;
            } 
            // fall through
          case 189: break;
          case 46: 
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            } 
            // fall through
          case 190: break;
          case 47: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 191: break;
          case 48: 
            { pushState(MULTI_LINE_COMMENT_STATE);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 192: break;
          case 49: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 193: break;
          case 50: 
            { return HASH_COMMENT;
            } 
            // fall through
          case 194: break;
          case 51: 
            { return HASH_LBRACK;
            } 
            // fall through
          case 195: break;
          case 52: 
            { return SAFE_DOT;
            } 
            // fall through
          case 196: break;
          case 53: 
            { return NOT_EQ;
            } 
            // fall through
          case 197: break;
          case 54: 
            { return FN;
            } 
            // fall through
          case 198: break;
          case 55: 
            { return IF;
            } 
            // fall through
          case 199: break;
          case 56: 
            { return IN;
            } 
            // fall through
          case 200: break;
          case 57: 
            { return IS;
            } 
            // fall through
          case 201: break;
          case 58: 
            { return AS ;
            } 
            // fall through
          case 202: break;
          case 59: 
            { return GO;
            } 
            // fall through
          case 203: break;
          case 60: 
            { return OR;
            } 
            // fall through
          case 204: break;
          case 61: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 205: break;
          case 62: 
            { pushState(MAYBE_SEMICOLON); return MINUS_MINUS;
            } 
            // fall through
          case 206: break;
          case 63: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 207: break;
          case 64: 
            { pushState(MAYBE_SEMICOLON); return FLOAT;
            } 
            // fall through
          case 208: break;
          case 65: 
            { return RANGE;
            } 
            // fall through
          case 209: break;
          case 66: 
            { pushState(MAYBE_SEMICOLON); return CHAR;
            } 
            // fall through
          case 210: break;
          case 67: 
            { return COND_OR;
            } 
            // fall through
          case 211: break;
          case 68: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 212: break;
          case 69: 
            { return VAR_ASSIGN;
            } 
            // fall through
          case 213: break;
          case 70: 
            { return EQ;
            } 
            // fall through
          case 214: break;
          case 71: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 215: break;
          case 72: 
            { pushState(MAYBE_SEMICOLON); return PLUS_PLUS;
            } 
            // fall through
          case 216: break;
          case 73: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 217: break;
          case 74: 
            { return COND_AND;
            } 
            // fall through
          case 218: break;
          case 75: 
            { return BIT_CLEAR;
            } 
            // fall through
          case 219: break;
          case 76: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 220: break;
          case 77: 
            { return SEND_CHANNEL;
            } 
            // fall through
          case 221: break;
          case 78: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 222: break;
          case 79: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 223: break;
          case 80: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 224: break;
          case 81: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 225: break;
          case 82: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 226: break;
          case 83: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                   yypushback(yylength() - 1);
                                                   return SHORT_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 227: break;
          case 84: 
            { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
            } 
            // fall through
          case 228: break;
          case 85: 
            { return LITERAL_STRING_TEMPLATE_ESCAPE_ENTRY;
            } 
            // fall through
          case 229: break;
          case 86: 
            { commentDepth++;
            } 
            // fall through
          case 230: break;
          case 87: 
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return MULTI_LINE_COMMENT;
        }
            } 
            // fall through
          case 231: break;
          case 88: 
            { return SHEBANG;
            } 
            // fall through
          case 232: break;
          case 89: 
            { return NOT_IN;
            } 
            // fall through
          case 233: break;
          case 90: 
            { return NOT_IS;
            } 
            // fall through
          case 234: break;
          case 91: 
            { return FOR;
            } 
            // fall through
          case 235: break;
          case 92: 
            { pushState(MAYBE_SEMICOLON); return NIL;
            } 
            // fall through
          case 236: break;
          case 93: 
            { pushState(ASM_BLOCK); return ASM;
            } 
            // fall through
          case 237: break;
          case 94: 
            { pushState(MAYBE_SEMICOLON); return RAW_STRING;
            } 
            // fall through
          case 238: break;
          case 95: 
            { return PUB;
            } 
            // fall through
          case 239: break;
          case 96: 
            { pushState(MAYBE_SEMICOLON); return OCT;
            } 
            // fall through
          case 240: break;
          case 97: 
            { pushState(MAYBE_SEMICOLON); return HEX;
            } 
            // fall through
          case 241: break;
          case 98: 
            { pushState(MAYBE_SEMICOLON); return BIN;
            } 
            // fall through
          case 242: break;
          case 99: 
            { return TRIPLE_DOT;
            } 
            // fall through
          case 243: break;
          case 100: 
            { return IF_COMPILE_TIME;
            } 
            // fall through
          case 244: break;
          case 101: 
            { pushState(MAYBE_SEMICOLON); return BAD_CHARACTER;
            } 
            // fall through
          case 245: break;
          case 102: 
            { return BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 246: break;
          case 103: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 247: break;
          case 104: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 248: break;
          case 105: 
            { return MUT;
            } 
            // fall through
          case 249: break;
          case 106: 
            { return MULTI_LINE_COMMENT;
            } 
            // fall through
          case 250: break;
          case 107: 
            { yypushback(3); pushState(MAYBE_SEMICOLON); return NOT;
            } 
            // fall through
          case 251: break;
          case 108: 
            { return DUMP;
            } 
            // fall through
          case 252: break;
          case 109: 
            { return ENUM;
            } 
            // fall through
          case 253: break;
          case 110: 
            { return ELSE;
            } 
            // fall through
          case 254: break;
          case 111: 
            { pushState(MAYBE_SEMICOLON); return NONE;
            } 
            // fall through
          case 255: break;
          case 112: 
            { return LOCK;
            } 
            // fall through
          case 256: break;
          case 113: 
            { return GOTO;
            } 
            // fall through
          case 257: break;
          case 114: 
            { pushState(MAYBE_SEMICOLON); return TRUE;
            } 
            // fall through
          case 258: break;
          case 115: 
            { return TYPE_;
            } 
            // fall through
          case 259: break;
          case 116: 
            { return FOR_COMPILE_TIME;
            } 
            // fall through
          case 260: break;
          case 117: 
            { return UNSIGNED_SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 261: break;
          case 118: 
            { return COMPILE_DIRECTIVE;
            } 
            // fall through
          case 262: break;
          case 119: 
            { return DEFER;
            } 
            // fall through
          case 263: break;
          case 120: 
            { pushState(MAYBE_SEMICOLON); return FALSE;
            } 
            // fall through
          case 264: break;
          case 121: 
            { return CONST;
            } 
            // fall through
          case 265: break;
          case 122: 
            { return UNION;
            } 
            // fall through
          case 266: break;
          case 123: 
            { return SPAWN;
            } 
            // fall through
          case 267: break;
          case 124: 
            { return RLOCK;
            } 
            // fall through
          case 268: break;
          case 125: 
            { pushState(MAYBE_SEMICOLON); return BREAK;
            } 
            // fall through
          case 269: break;
          case 126: 
            { return ELSE_COMPILE_TIME;
            } 
            // fall through
          case 270: break;
          case 127: 
            { return MATCH;
            } 
            // fall through
          case 271: break;
          case 128: 
            { return IMPORT ;
            } 
            // fall through
          case 272: break;
          case 129: 
            { return ASSERT;
            } 
            // fall through
          case 273: break;
          case 130: 
            { return UNSAFE;
            } 
            // fall through
          case 274: break;
          case 131: 
            { return SELECT;
            } 
            // fall through
          case 275: break;
          case 132: 
            { return SIZEOF;
            } 
            // fall through
          case 276: break;
          case 133: 
            { return STATIC;
            } 
            // fall through
          case 277: break;
          case 134: 
            { return STRUCT;
            } 
            // fall through
          case 278: break;
          case 135: 
            { return SHARED;
            } 
            // fall through
          case 279: break;
          case 136: 
            { pushState(MAYBE_SEMICOLON); return RETURN;
            } 
            // fall through
          case 280: break;
          case 137: 
            { return TYPEOF;
            } 
            // fall through
          case 281: break;
          case 138: 
            { return MODULE;
            } 
            // fall through
          case 282: break;
          case 139: 
            { pushState(MAYBE_SEMICOLON); return CONTINUE;
            } 
            // fall through
          case 283: break;
          case 140: 
            { return BUILTIN_GLOBAL;
            } 
            // fall through
          case 284: break;
          case 141: 
            { return VOLATILE;
            } 
            // fall through
          case 285: break;
          case 142: 
            { return INTERFACE;
            } 
            // fall through
          case 286: break;
          case 143: 
            { return ISREFTYPE;
            } 
            // fall through
          case 287: break;
          case 144: 
            { return OFFSETOF;
            } 
            // fall through
          case 288: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
